### YamlMime:ManagedReference
items:
- uid: Open.ChannelExtensions.TransformChannel`3
  commentId: T:Open.ChannelExtensions.TransformChannel`3
  id: TransformChannel`3
  parent: Open.ChannelExtensions
  children:
  - Open.ChannelExtensions.TransformChannel`3.#ctor(System.Threading.Channels.Channel{`0,`1},System.Func{`1,`2})
  langs:
  - csharp
  - vb
  name: TransformChannel<TWrite, TRead, TResult>
  nameWithType: TransformChannel<TWrite, TRead, TResult>
  fullName: Open.ChannelExtensions.TransformChannel<TWrite, TRead, TResult>
  type: Class
  source:
    remote:
      path: Open.ChannelExtensions/TransformChannel.cs
      branch: master
      repo: https://github.com/electricessence/Open.ChannelExtensions.git
    id: TransformChannel
    path: ../Open.ChannelExtensions/TransformChannel.cs
    startLine: 12
  assemblies:
  - Open.ChannelExtensions
  namespace: Open.ChannelExtensions
  summary: "\nA channel wrapper that takes the provided channel and transforms them on demand when being read.\n"
  example: []
  syntax:
    content: 'public class TransformChannel<TWrite, TRead, TResult> : Channel<TWrite, TResult>'
    typeParameters:
    - id: TWrite
      description: Specifies the type of data that may be written to the channel.
    - id: TRead
      description: Specifies the type of data read from the source channel.
    - id: TResult
      description: Specifies the type of data that may be read from the channel.
    content.vb: >-
      Public Class TransformChannel(Of TWrite, TRead, TResult)
          Inherits Channel(Of TWrite, TResult)
  inheritance:
  - System.Object
  - System.Threading.Channels.Channel{{TWrite},{TResult}}
  derivedClasses:
  - Open.ChannelExtensions.TransformChannel`2
  inheritedMembers:
  - System.Threading.Channels.Channel{{TWrite},{TResult}}.Reader
  - System.Threading.Channels.Channel{{TWrite},{TResult}}.Writer
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.PipeAsync``3(System.Int32,System.Func{{TResult},System.Threading.Tasks.ValueTask{{TOut}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Int32,System.Func{{TResult},System.Threading.Tasks.Task{{TOut}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Pipe``3(System.Int32,System.Func{{TResult},{TOut}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.PipeAsync``3(System.Func{{TResult},System.Threading.Tasks.ValueTask{{TOut}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Func{{TResult},System.Threading.Tasks.Task{{TOut}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Pipe``3(System.Func{{TResult},{TOut}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.CancellationToken,System.Func{{TResult},System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.CancellationToken,System.Func{{TResult},System.Threading.Tasks.ValueTask},System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.CancellationToken,System.Action{{TResult},System.Int64},System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Action{{TResult}},System.Threading.CancellationToken,System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{{TResult},System.Int64,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{{TResult},System.Int64,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.CancellationToken,System.Func{{TResult},System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{{TResult},System.Int64,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{{TResult},System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.CancellationToken,System.Func{{TResult},System.Int64,System.Threading.Tasks.Task},System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{{TResult},System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{{TResult},System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.CancellationToken,System.Func{{TResult},System.Threading.Tasks.Task},System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{{TResult},System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{{TResult},System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.CancellationToken,System.Func{{TResult},System.Threading.Tasks.ValueTask},System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{{TResult},System.Int64},System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{{TResult},System.Int64},System.Threading.CancellationToken,System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.CancellationToken,System.Action{{TResult},System.Int64},System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{{TResult}},System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{{TResult}},System.Threading.CancellationToken,System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.CancellationToken,System.Action{{TResult}},System.Boolean)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Int32,System.Func{{TResult},System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Int32,System.Threading.CancellationToken,System.Func{{TResult},System.Threading.Tasks.ValueTask})
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync``2(System.Int32,System.Func{{TResult},System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Int32,System.Action{{TResult}},System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Int32,System.Threading.CancellationToken,System.Action{{TResult}})
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Func{{TWrite}}},System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Func{{TWrite}}},System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{{TWrite}}},System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{{TWrite}}},System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TWrite}}},System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TWrite}}},System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IEnumerable{{TWrite}},System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IEnumerable{{TWrite}},System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Int32,System.Collections.Generic.IEnumerable{System.Func{{TWrite}}},System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{{TWrite}}},System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TWrite}}},System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IAsyncEnumerable{{TWrite}},System.Boolean,System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IAsyncEnumerable{{TWrite}},System.Threading.CancellationToken)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Transform``3(System.Func{{TResult},{TResult}})
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.CompleteAsync``2(System.Exception)
  - System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.AsAsyncEnumerable``2(System.Threading.CancellationToken)
  nameWithType.vb: TransformChannel(Of TWrite, TRead, TResult)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Open.ChannelExtensions.TransformChannel(Of TWrite, TRead, TResult)
  name.vb: TransformChannel(Of TWrite, TRead, TResult)
- uid: Open.ChannelExtensions.TransformChannel`3.#ctor(System.Threading.Channels.Channel{`0,`1},System.Func{`1,`2})
  commentId: M:Open.ChannelExtensions.TransformChannel`3.#ctor(System.Threading.Channels.Channel{`0,`1},System.Func{`1,`2})
  id: '#ctor(System.Threading.Channels.Channel{`0,`1},System.Func{`1,`2})'
  parent: Open.ChannelExtensions.TransformChannel`3
  langs:
  - csharp
  - vb
  name: TransformChannel(Channel<TWrite, TRead>, Func<TRead, TResult>)
  nameWithType: TransformChannel<TWrite, TRead, TResult>.TransformChannel(Channel<TWrite, TRead>, Func<TRead, TResult>)
  fullName: Open.ChannelExtensions.TransformChannel<TWrite, TRead, TResult>.TransformChannel(System.Threading.Channels.Channel<TWrite, TRead>, System.Func<TRead, TResult>)
  type: Constructor
  source:
    remote:
      path: Open.ChannelExtensions/TransformChannel.cs
      branch: master
      repo: https://github.com/electricessence/Open.ChannelExtensions.git
    id: .ctor
    path: ../Open.ChannelExtensions/TransformChannel.cs
    startLine: 19
  assemblies:
  - Open.ChannelExtensions
  namespace: Open.ChannelExtensions
  summary: "\nCreates a channel wrapper that takes the provided channel and transforms them on demand when being read.\n"
  example: []
  syntax:
    content: public TransformChannel(Channel<TWrite, TRead> source, Func<TRead, TResult> transform)
    parameters:
    - id: source
      type: System.Threading.Channels.Channel{{TWrite},{TRead}}
      description: The channel containing the source data.
    - id: transform
      type: System.Func{{TRead},{TResult}}
      description: The transform function to be applied to the results when being read.
    content.vb: Public Sub New(source As Channel(Of TWrite, TRead), transform As Func(Of TRead, TResult))
  overload: Open.ChannelExtensions.TransformChannel`3.#ctor*
  nameWithType.vb: TransformChannel(Of TWrite, TRead, TResult).TransformChannel(Channel(Of TWrite, TRead), Func(Of TRead, TResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Open.ChannelExtensions.TransformChannel(Of TWrite, TRead, TResult).TransformChannel(System.Threading.Channels.Channel(Of TWrite, TRead), System.Func(Of TRead, TResult))
  name.vb: TransformChannel(Channel(Of TWrite, TRead), Func(Of TRead, TResult))
references:
- uid: Open.ChannelExtensions
  commentId: N:Open.ChannelExtensions
  name: Open.ChannelExtensions
  nameWithType: Open.ChannelExtensions
  fullName: Open.ChannelExtensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Channels.Channel{{TWrite},{TResult}}
  commentId: T:System.Threading.Channels.Channel{`0,`2}
  parent: System.Threading.Channels
  definition: System.Threading.Channels.Channel`2
  name: Channel<TWrite, TResult>
  nameWithType: Channel<TWrite, TResult>
  fullName: System.Threading.Channels.Channel<TWrite, TResult>
  nameWithType.vb: Channel(Of TWrite, TResult)
  fullName.vb: System.Threading.Channels.Channel(Of TWrite, TResult)
  name.vb: Channel(Of TWrite, TResult)
  spec.csharp:
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{{TWrite},{TResult}}.Reader
  commentId: P:System.Threading.Channels.Channel{`0,`2}.Reader
  parent: System.Threading.Channels.Channel{{TWrite},{TResult}}
  definition: System.Threading.Channels.Channel`2.Reader
  name: Reader
  nameWithType: Channel<TWrite, TResult>.Reader
  fullName: System.Threading.Channels.Channel<TWrite, TResult>.Reader
  nameWithType.vb: Channel(Of TWrite, TResult).Reader
  fullName.vb: System.Threading.Channels.Channel(Of TWrite, TResult).Reader
- uid: System.Threading.Channels.Channel{{TWrite},{TResult}}.Writer
  commentId: P:System.Threading.Channels.Channel{`0,`2}.Writer
  parent: System.Threading.Channels.Channel{{TWrite},{TResult}}
  definition: System.Threading.Channels.Channel`2.Writer
  name: Writer
  nameWithType: Channel<TWrite, TResult>.Writer
  fullName: System.Threading.Channels.Channel<TWrite, TResult>.Writer
  nameWithType.vb: Channel(Of TWrite, TResult).Writer
  fullName.vb: System.Threading.Channels.Channel(Of TWrite, TResult).Writer
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.PipeAsync``3(System.Int32,System.Func{{TResult},System.Threading.Tasks.ValueTask{{TOut}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  name: PipeAsync<TWrite, TResult, TOut>(Int32, Func<TResult, ValueTask<TOut>>, Int32, Boolean, CancellationToken)
  nameWithType: Extensions.PipeAsync<TWrite, TResult, TOut>(Int32, Func<TResult, ValueTask<TOut>>, Int32, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.PipeAsync<TWrite, TResult, TOut>(System.Int32, System.Func<TResult, System.Threading.Tasks.ValueTask<TOut>>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.PipeAsync(Of TWrite, TResult, TOut)(Int32, Func(Of TResult, ValueTask(Of TOut)), Int32, Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.PipeAsync(Of TWrite, TResult, TOut)(System.Int32, System.Func(Of TResult, System.Threading.Tasks.ValueTask(Of TOut)), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: PipeAsync(Of TWrite, TResult, TOut)(Int32, Func(Of TResult, ValueTask(Of TOut)), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.PipeAsync``3(System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: PipeAsync<TWrite, TResult, TOut>
    nameWithType: Extensions.PipeAsync<TWrite, TResult, TOut>
    fullName: Open.ChannelExtensions.Extensions.PipeAsync<TWrite, TResult, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.PipeAsync``3(System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: PipeAsync(Of TWrite, TResult, TOut)
    nameWithType: Extensions.PipeAsync(Of TWrite, TResult, TOut)
    fullName: Open.ChannelExtensions.Extensions.PipeAsync(Of TWrite, TResult, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Int32,System.Func{{TResult},System.Threading.Tasks.Task{{TOut}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  name: TaskPipeAsync<TWrite, TResult, TOut>(Int32, Func<TResult, Task<TOut>>, Int32, Boolean, CancellationToken)
  nameWithType: Extensions.TaskPipeAsync<TWrite, TResult, TOut>(Int32, Func<TResult, Task<TOut>>, Int32, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.TaskPipeAsync<TWrite, TResult, TOut>(System.Int32, System.Func<TResult, System.Threading.Tasks.Task<TOut>>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.TaskPipeAsync(Of TWrite, TResult, TOut)(Int32, Func(Of TResult, Task(Of TOut)), Int32, Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskPipeAsync(Of TWrite, TResult, TOut)(System.Int32, System.Func(Of TResult, System.Threading.Tasks.Task(Of TOut)), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: TaskPipeAsync(Of TWrite, TResult, TOut)(Int32, Func(Of TResult, Task(Of TOut)), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Int32,System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: TaskPipeAsync<TWrite, TResult, TOut>
    nameWithType: Extensions.TaskPipeAsync<TWrite, TResult, TOut>
    fullName: Open.ChannelExtensions.Extensions.TaskPipeAsync<TWrite, TResult, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Int32,System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: TaskPipeAsync(Of TWrite, TResult, TOut)
    nameWithType: Extensions.TaskPipeAsync(Of TWrite, TResult, TOut)
    fullName: Open.ChannelExtensions.Extensions.TaskPipeAsync(Of TWrite, TResult, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Pipe``3(System.Int32,System.Func{{TResult},{TOut}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
  name: Pipe<TWrite, TResult, TOut>(Int32, Func<TResult, TOut>, Int32, Boolean, CancellationToken)
  nameWithType: Extensions.Pipe<TWrite, TResult, TOut>(Int32, Func<TResult, TOut>, Int32, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.Pipe<TWrite, TResult, TOut>(System.Int32, System.Func<TResult, TOut>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.Pipe(Of TWrite, TResult, TOut)(Int32, Func(Of TResult, TOut), Int32, Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.Pipe(Of TWrite, TResult, TOut)(System.Int32, System.Func(Of TResult, TOut), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: Pipe(Of TWrite, TResult, TOut)(Int32, Func(Of TResult, TOut), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Pipe``3(System.Int32,System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: Pipe<TWrite, TResult, TOut>
    nameWithType: Extensions.Pipe<TWrite, TResult, TOut>
    fullName: Open.ChannelExtensions.Extensions.Pipe<TWrite, TResult, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Pipe``3(System.Int32,System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: Pipe(Of TWrite, TResult, TOut)
    nameWithType: Extensions.Pipe(Of TWrite, TResult, TOut)
    fullName: Open.ChannelExtensions.Extensions.Pipe(Of TWrite, TResult, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.PipeAsync``3(System.Func{{TResult},System.Threading.Tasks.ValueTask{{TOut}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  name: PipeAsync<TWrite, TResult, TOut>(Func<TResult, ValueTask<TOut>>, Int32, Boolean, CancellationToken)
  nameWithType: Extensions.PipeAsync<TWrite, TResult, TOut>(Func<TResult, ValueTask<TOut>>, Int32, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.PipeAsync<TWrite, TResult, TOut>(System.Func<TResult, System.Threading.Tasks.ValueTask<TOut>>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.PipeAsync(Of TWrite, TResult, TOut)(Func(Of TResult, ValueTask(Of TOut)), Int32, Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.PipeAsync(Of TWrite, TResult, TOut)(System.Func(Of TResult, System.Threading.Tasks.ValueTask(Of TOut)), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: PipeAsync(Of TWrite, TResult, TOut)(Func(Of TResult, ValueTask(Of TOut)), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.PipeAsync``3(System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: PipeAsync<TWrite, TResult, TOut>
    nameWithType: Extensions.PipeAsync<TWrite, TResult, TOut>
    fullName: Open.ChannelExtensions.Extensions.PipeAsync<TWrite, TResult, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.PipeAsync``3(System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: PipeAsync(Of TWrite, TResult, TOut)
    nameWithType: Extensions.PipeAsync(Of TWrite, TResult, TOut)
    fullName: Open.ChannelExtensions.Extensions.PipeAsync(Of TWrite, TResult, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Func{{TResult},System.Threading.Tasks.Task{{TOut}}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  name: TaskPipeAsync<TWrite, TResult, TOut>(Func<TResult, Task<TOut>>, Int32, Boolean, CancellationToken)
  nameWithType: Extensions.TaskPipeAsync<TWrite, TResult, TOut>(Func<TResult, Task<TOut>>, Int32, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.TaskPipeAsync<TWrite, TResult, TOut>(System.Func<TResult, System.Threading.Tasks.Task<TOut>>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.TaskPipeAsync(Of TWrite, TResult, TOut)(Func(Of TResult, Task(Of TOut)), Int32, Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskPipeAsync(Of TWrite, TResult, TOut)(System.Func(Of TResult, System.Threading.Tasks.Task(Of TOut)), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: TaskPipeAsync(Of TWrite, TResult, TOut)(Func(Of TResult, Task(Of TOut)), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: TaskPipeAsync<TWrite, TResult, TOut>
    nameWithType: Extensions.TaskPipeAsync<TWrite, TResult, TOut>
    fullName: Open.ChannelExtensions.Extensions.TaskPipeAsync<TWrite, TResult, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: TaskPipeAsync(Of TWrite, TResult, TOut)
    nameWithType: Extensions.TaskPipeAsync(Of TWrite, TResult, TOut)
    fullName: Open.ChannelExtensions.Extensions.TaskPipeAsync(Of TWrite, TResult, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Pipe``3(System.Func{{TResult},{TOut}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
  name: Pipe<TWrite, TResult, TOut>(Func<TResult, TOut>, Int32, Boolean, CancellationToken)
  nameWithType: Extensions.Pipe<TWrite, TResult, TOut>(Func<TResult, TOut>, Int32, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.Pipe<TWrite, TResult, TOut>(System.Func<TResult, TOut>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.Pipe(Of TWrite, TResult, TOut)(Func(Of TResult, TOut), Int32, Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.Pipe(Of TWrite, TResult, TOut)(System.Func(Of TResult, TOut), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: Pipe(Of TWrite, TResult, TOut)(Func(Of TResult, TOut), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Pipe``3(System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: Pipe<TWrite, TResult, TOut>
    nameWithType: Extensions.Pipe<TWrite, TResult, TOut>
    fullName: Open.ChannelExtensions.Extensions.Pipe<TWrite, TResult, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Pipe``3(System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: Pipe(Of TWrite, TResult, TOut)
    nameWithType: Extensions.Pipe(Of TWrite, TResult, TOut)
    fullName: Open.ChannelExtensions.Extensions.Pipe(Of TWrite, TResult, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.CancellationToken,System.Func{{TResult},System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
  name: ReadUntilCancelledAsync<TWrite, TResult>(CancellationToken, Func<TResult, Int64, ValueTask>, Boolean)
  nameWithType: Extensions.ReadUntilCancelledAsync<TWrite, TResult>(CancellationToken, Func<TResult, Int64, ValueTask>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync<TWrite, TResult>(System.Threading.CancellationToken, System.Func<TResult, System.Int64, System.Threading.Tasks.ValueTask>, System.Boolean)
  nameWithType.vb: Extensions.ReadUntilCancelledAsync(Of TWrite, TResult)(CancellationToken, Func(Of TResult, Int64, ValueTask), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync(Of TWrite, TResult)(System.Threading.CancellationToken, System.Func(Of TResult, System.Int64, System.Threading.Tasks.ValueTask), System.Boolean)
  name.vb: ReadUntilCancelledAsync(Of TWrite, TResult)(CancellationToken, Func(Of TResult, Int64, ValueTask), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadUntilCancelledAsync<TWrite, TResult>
    nameWithType: Extensions.ReadUntilCancelledAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadUntilCancelledAsync(Of TWrite, TResult)
    nameWithType: Extensions.ReadUntilCancelledAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.CancellationToken,System.Func{{TResult},System.Threading.Tasks.ValueTask},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
  name: ReadUntilCancelledAsync<TWrite, TResult>(CancellationToken, Func<TResult, ValueTask>, Boolean)
  nameWithType: Extensions.ReadUntilCancelledAsync<TWrite, TResult>(CancellationToken, Func<TResult, ValueTask>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync<TWrite, TResult>(System.Threading.CancellationToken, System.Func<TResult, System.Threading.Tasks.ValueTask>, System.Boolean)
  nameWithType.vb: Extensions.ReadUntilCancelledAsync(Of TWrite, TResult)(CancellationToken, Func(Of TResult, ValueTask), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync(Of TWrite, TResult)(System.Threading.CancellationToken, System.Func(Of TResult, System.Threading.Tasks.ValueTask), System.Boolean)
  name.vb: ReadUntilCancelledAsync(Of TWrite, TResult)(CancellationToken, Func(Of TResult, ValueTask), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadUntilCancelledAsync<TWrite, TResult>
    nameWithType: Extensions.ReadUntilCancelledAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadUntilCancelledAsync(Of TWrite, TResult)
    nameWithType: Extensions.ReadUntilCancelledAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.CancellationToken,System.Action{{TResult},System.Int64},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
  name: ReadUntilCancelled<TWrite, TResult>(CancellationToken, Action<TResult, Int64>, Boolean)
  nameWithType: Extensions.ReadUntilCancelled<TWrite, TResult>(CancellationToken, Action<TResult, Int64>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelled<TWrite, TResult>(System.Threading.CancellationToken, System.Action<TResult, System.Int64>, System.Boolean)
  nameWithType.vb: Extensions.ReadUntilCancelled(Of TWrite, TResult)(CancellationToken, Action(Of TResult, Int64), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadUntilCancelled(Of TWrite, TResult)(System.Threading.CancellationToken, System.Action(Of TResult, System.Int64), System.Boolean)
  name.vb: ReadUntilCancelled(Of TWrite, TResult)(CancellationToken, Action(Of TResult, Int64), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
    name: ReadUntilCancelled<TWrite, TResult>
    nameWithType: Extensions.ReadUntilCancelled<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelled<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
    name: ReadUntilCancelled(Of TWrite, TResult)
    nameWithType: Extensions.ReadUntilCancelled(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelled(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Action{{TResult}},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)
  name: ReadUntilCancelled<TWrite, TResult>(Action<TResult>, CancellationToken, Boolean)
  nameWithType: Extensions.ReadUntilCancelled<TWrite, TResult>(Action<TResult>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelled<TWrite, TResult>(System.Action<TResult>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.ReadUntilCancelled(Of TWrite, TResult)(Action(Of TResult), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadUntilCancelled(Of TWrite, TResult)(System.Action(Of TResult), System.Threading.CancellationToken, System.Boolean)
  name.vb: ReadUntilCancelled(Of TWrite, TResult)(Action(Of TResult), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Action{``1},System.Threading.CancellationToken,System.Boolean)
    name: ReadUntilCancelled<TWrite, TResult>
    nameWithType: Extensions.ReadUntilCancelled<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelled<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Action{``1},System.Threading.CancellationToken,System.Boolean)
    name: ReadUntilCancelled(Of TWrite, TResult)
    nameWithType: Extensions.ReadUntilCancelled(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelled(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{{TResult},System.Int64,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
  name: ReadAllAsync<TWrite, TResult>(Func<TResult, Int64, ValueTask>, Boolean, CancellationToken)
  nameWithType: Extensions.ReadAllAsync<TWrite, TResult>(Func<TResult, Int64, ValueTask>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TResult>(System.Func<TResult, System.Int64, System.Threading.Tasks.ValueTask>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.ReadAllAsync(Of TWrite, TResult)(Func(Of TResult, Int64, ValueTask), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TResult)(System.Func(Of TResult, System.Int64, System.Threading.Tasks.ValueTask), System.Boolean, System.Threading.CancellationToken)
  name.vb: ReadAllAsync(Of TWrite, TResult)(Func(Of TResult, Int64, ValueTask), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
    name: ReadAllAsync<TWrite, TResult>
    nameWithType: Extensions.ReadAllAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
    name: ReadAllAsync(Of TWrite, TResult)
    nameWithType: Extensions.ReadAllAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{{TResult},System.Int64,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
  name: ReadAllAsync<TWrite, TResult>(Func<TResult, Int64, ValueTask>, CancellationToken, Boolean)
  nameWithType: Extensions.ReadAllAsync<TWrite, TResult>(Func<TResult, Int64, ValueTask>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TResult>(System.Func<TResult, System.Int64, System.Threading.Tasks.ValueTask>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.ReadAllAsync(Of TWrite, TResult)(Func(Of TResult, Int64, ValueTask), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TResult)(System.Func(Of TResult, System.Int64, System.Threading.Tasks.ValueTask), System.Threading.CancellationToken, System.Boolean)
  name.vb: ReadAllAsync(Of TWrite, TResult)(Func(Of TResult, Int64, ValueTask), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
    name: ReadAllAsync<TWrite, TResult>
    nameWithType: Extensions.ReadAllAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
    name: ReadAllAsync(Of TWrite, TResult)
    nameWithType: Extensions.ReadAllAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.CancellationToken,System.Func{{TResult},System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
  name: ReadAllAsync<TWrite, TResult>(CancellationToken, Func<TResult, Int64, ValueTask>, Boolean)
  nameWithType: Extensions.ReadAllAsync<TWrite, TResult>(CancellationToken, Func<TResult, Int64, ValueTask>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TResult>(System.Threading.CancellationToken, System.Func<TResult, System.Int64, System.Threading.Tasks.ValueTask>, System.Boolean)
  nameWithType.vb: Extensions.ReadAllAsync(Of TWrite, TResult)(CancellationToken, Func(Of TResult, Int64, ValueTask), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TResult)(System.Threading.CancellationToken, System.Func(Of TResult, System.Int64, System.Threading.Tasks.ValueTask), System.Boolean)
  name.vb: ReadAllAsync(Of TWrite, TResult)(CancellationToken, Func(Of TResult, Int64, ValueTask), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadAllAsync<TWrite, TResult>
    nameWithType: Extensions.ReadAllAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadAllAsync(Of TWrite, TResult)
    nameWithType: Extensions.ReadAllAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{{TResult},System.Int64,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
  name: TaskReadAllAsync<TWrite, TResult>(Func<TResult, Int64, Task>, Boolean, CancellationToken)
  nameWithType: Extensions.TaskReadAllAsync<TWrite, TResult>(Func<TResult, Int64, Task>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TResult>(System.Func<TResult, System.Int64, System.Threading.Tasks.Task>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.TaskReadAllAsync(Of TWrite, TResult)(Func(Of TResult, Int64, Task), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TResult)(System.Func(Of TResult, System.Int64, System.Threading.Tasks.Task), System.Boolean, System.Threading.CancellationToken)
  name.vb: TaskReadAllAsync(Of TWrite, TResult)(Func(Of TResult, Int64, Task), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
    name: TaskReadAllAsync<TWrite, TResult>
    nameWithType: Extensions.TaskReadAllAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
    name: TaskReadAllAsync(Of TWrite, TResult)
    nameWithType: Extensions.TaskReadAllAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{{TResult},System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
  name: TaskReadAllAsync<TWrite, TResult>(Func<TResult, Int64, Task>, CancellationToken, Boolean)
  nameWithType: Extensions.TaskReadAllAsync<TWrite, TResult>(Func<TResult, Int64, Task>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TResult>(System.Func<TResult, System.Int64, System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.TaskReadAllAsync(Of TWrite, TResult)(Func(Of TResult, Int64, Task), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TResult)(System.Func(Of TResult, System.Int64, System.Threading.Tasks.Task), System.Threading.CancellationToken, System.Boolean)
  name.vb: TaskReadAllAsync(Of TWrite, TResult)(Func(Of TResult, Int64, Task), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
    name: TaskReadAllAsync<TWrite, TResult>
    nameWithType: Extensions.TaskReadAllAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
    name: TaskReadAllAsync(Of TWrite, TResult)
    nameWithType: Extensions.TaskReadAllAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.CancellationToken,System.Func{{TResult},System.Int64,System.Threading.Tasks.Task},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean)
  name: TaskReadAllAsync<TWrite, TResult>(CancellationToken, Func<TResult, Int64, Task>, Boolean)
  nameWithType: Extensions.TaskReadAllAsync<TWrite, TResult>(CancellationToken, Func<TResult, Int64, Task>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TResult>(System.Threading.CancellationToken, System.Func<TResult, System.Int64, System.Threading.Tasks.Task>, System.Boolean)
  nameWithType.vb: Extensions.TaskReadAllAsync(Of TWrite, TResult)(CancellationToken, Func(Of TResult, Int64, Task), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TResult)(System.Threading.CancellationToken, System.Func(Of TResult, System.Int64, System.Threading.Tasks.Task), System.Boolean)
  name.vb: TaskReadAllAsync(Of TWrite, TResult)(CancellationToken, Func(Of TResult, Int64, Task), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean)
    name: TaskReadAllAsync<TWrite, TResult>
    nameWithType: Extensions.TaskReadAllAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean)
    name: TaskReadAllAsync(Of TWrite, TResult)
    nameWithType: Extensions.TaskReadAllAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{{TResult},System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
  name: TaskReadAllAsync<TWrite, TResult>(Func<TResult, Task>, Boolean, CancellationToken)
  nameWithType: Extensions.TaskReadAllAsync<TWrite, TResult>(Func<TResult, Task>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TResult>(System.Func<TResult, System.Threading.Tasks.Task>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.TaskReadAllAsync(Of TWrite, TResult)(Func(Of TResult, Task), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TResult)(System.Func(Of TResult, System.Threading.Tasks.Task), System.Boolean, System.Threading.CancellationToken)
  name.vb: TaskReadAllAsync(Of TWrite, TResult)(Func(Of TResult, Task), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{``1,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
    name: TaskReadAllAsync<TWrite, TResult>
    nameWithType: Extensions.TaskReadAllAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{``1,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
    name: TaskReadAllAsync(Of TWrite, TResult)
    nameWithType: Extensions.TaskReadAllAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{{TResult},System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
  name: TaskReadAllAsync<TWrite, TResult>(Func<TResult, Task>, CancellationToken, Boolean)
  nameWithType: Extensions.TaskReadAllAsync<TWrite, TResult>(Func<TResult, Task>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TResult>(System.Func<TResult, System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.TaskReadAllAsync(Of TWrite, TResult)(Func(Of TResult, Task), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TResult)(System.Func(Of TResult, System.Threading.Tasks.Task), System.Threading.CancellationToken, System.Boolean)
  name.vb: TaskReadAllAsync(Of TWrite, TResult)(Func(Of TResult, Task), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
    name: TaskReadAllAsync<TWrite, TResult>
    nameWithType: Extensions.TaskReadAllAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
    name: TaskReadAllAsync(Of TWrite, TResult)
    nameWithType: Extensions.TaskReadAllAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.CancellationToken,System.Func{{TResult},System.Threading.Tasks.Task},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.Task},System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.Task},System.Boolean)
  name: TaskReadAllAsync<TWrite, TResult>(CancellationToken, Func<TResult, Task>, Boolean)
  nameWithType: Extensions.TaskReadAllAsync<TWrite, TResult>(CancellationToken, Func<TResult, Task>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TResult>(System.Threading.CancellationToken, System.Func<TResult, System.Threading.Tasks.Task>, System.Boolean)
  nameWithType.vb: Extensions.TaskReadAllAsync(Of TWrite, TResult)(CancellationToken, Func(Of TResult, Task), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TResult)(System.Threading.CancellationToken, System.Func(Of TResult, System.Threading.Tasks.Task), System.Boolean)
  name.vb: TaskReadAllAsync(Of TWrite, TResult)(CancellationToken, Func(Of TResult, Task), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.Task},System.Boolean)
    name: TaskReadAllAsync<TWrite, TResult>
    nameWithType: Extensions.TaskReadAllAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.Task},System.Boolean)
    name: TaskReadAllAsync(Of TWrite, TResult)
    nameWithType: Extensions.TaskReadAllAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{{TResult},System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
  name: ReadAllAsync<TWrite, TResult>(Func<TResult, ValueTask>, Boolean, CancellationToken)
  nameWithType: Extensions.ReadAllAsync<TWrite, TResult>(Func<TResult, ValueTask>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TResult>(System.Func<TResult, System.Threading.Tasks.ValueTask>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.ReadAllAsync(Of TWrite, TResult)(Func(Of TResult, ValueTask), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TResult)(System.Func(Of TResult, System.Threading.Tasks.ValueTask), System.Boolean, System.Threading.CancellationToken)
  name.vb: ReadAllAsync(Of TWrite, TResult)(Func(Of TResult, ValueTask), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
    name: ReadAllAsync<TWrite, TResult>
    nameWithType: Extensions.ReadAllAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
    name: ReadAllAsync(Of TWrite, TResult)
    nameWithType: Extensions.ReadAllAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{{TResult},System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
  name: ReadAllAsync<TWrite, TResult>(Func<TResult, ValueTask>, CancellationToken, Boolean)
  nameWithType: Extensions.ReadAllAsync<TWrite, TResult>(Func<TResult, ValueTask>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TResult>(System.Func<TResult, System.Threading.Tasks.ValueTask>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.ReadAllAsync(Of TWrite, TResult)(Func(Of TResult, ValueTask), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TResult)(System.Func(Of TResult, System.Threading.Tasks.ValueTask), System.Threading.CancellationToken, System.Boolean)
  name.vb: ReadAllAsync(Of TWrite, TResult)(Func(Of TResult, ValueTask), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
    name: ReadAllAsync<TWrite, TResult>
    nameWithType: Extensions.ReadAllAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
    name: ReadAllAsync(Of TWrite, TResult)
    nameWithType: Extensions.ReadAllAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.CancellationToken,System.Func{{TResult},System.Threading.Tasks.ValueTask},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
  name: ReadAllAsync<TWrite, TResult>(CancellationToken, Func<TResult, ValueTask>, Boolean)
  nameWithType: Extensions.ReadAllAsync<TWrite, TResult>(CancellationToken, Func<TResult, ValueTask>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TResult>(System.Threading.CancellationToken, System.Func<TResult, System.Threading.Tasks.ValueTask>, System.Boolean)
  nameWithType.vb: Extensions.ReadAllAsync(Of TWrite, TResult)(CancellationToken, Func(Of TResult, ValueTask), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TResult)(System.Threading.CancellationToken, System.Func(Of TResult, System.Threading.Tasks.ValueTask), System.Boolean)
  name.vb: ReadAllAsync(Of TWrite, TResult)(CancellationToken, Func(Of TResult, ValueTask), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadAllAsync<TWrite, TResult>
    nameWithType: Extensions.ReadAllAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadAllAsync(Of TWrite, TResult)
    nameWithType: Extensions.ReadAllAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{{TResult},System.Int64},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Boolean,System.Threading.CancellationToken)
  name: ReadAll<TWrite, TResult>(Action<TResult, Int64>, Boolean, CancellationToken)
  nameWithType: Extensions.ReadAll<TWrite, TResult>(Action<TResult, Int64>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TResult>(System.Action<TResult, System.Int64>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.ReadAll(Of TWrite, TResult)(Action(Of TResult, Int64), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TResult)(System.Action(Of TResult, System.Int64), System.Boolean, System.Threading.CancellationToken)
  name.vb: ReadAll(Of TWrite, TResult)(Action(Of TResult, Int64), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{``1,System.Int64},System.Boolean,System.Threading.CancellationToken)
    name: ReadAll<TWrite, TResult>
    nameWithType: Extensions.ReadAll<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{``1,System.Int64},System.Boolean,System.Threading.CancellationToken)
    name: ReadAll(Of TWrite, TResult)
    nameWithType: Extensions.ReadAll(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{{TResult},System.Int64},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Threading.CancellationToken,System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Threading.CancellationToken,System.Boolean)
  name: ReadAll<TWrite, TResult>(Action<TResult, Int64>, CancellationToken, Boolean)
  nameWithType: Extensions.ReadAll<TWrite, TResult>(Action<TResult, Int64>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TResult>(System.Action<TResult, System.Int64>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.ReadAll(Of TWrite, TResult)(Action(Of TResult, Int64), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TResult)(System.Action(Of TResult, System.Int64), System.Threading.CancellationToken, System.Boolean)
  name.vb: ReadAll(Of TWrite, TResult)(Action(Of TResult, Int64), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{``1,System.Int64},System.Threading.CancellationToken,System.Boolean)
    name: ReadAll<TWrite, TResult>
    nameWithType: Extensions.ReadAll<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{``1,System.Int64},System.Threading.CancellationToken,System.Boolean)
    name: ReadAll(Of TWrite, TResult)
    nameWithType: Extensions.ReadAll(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.CancellationToken,System.Action{{TResult},System.Int64},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
  name: ReadAll<TWrite, TResult>(CancellationToken, Action<TResult, Int64>, Boolean)
  nameWithType: Extensions.ReadAll<TWrite, TResult>(CancellationToken, Action<TResult, Int64>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TResult>(System.Threading.CancellationToken, System.Action<TResult, System.Int64>, System.Boolean)
  nameWithType.vb: Extensions.ReadAll(Of TWrite, TResult)(CancellationToken, Action(Of TResult, Int64), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TResult)(System.Threading.CancellationToken, System.Action(Of TResult, System.Int64), System.Boolean)
  name.vb: ReadAll(Of TWrite, TResult)(CancellationToken, Action(Of TResult, Int64), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
    name: ReadAll<TWrite, TResult>
    nameWithType: Extensions.ReadAll<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
    name: ReadAll(Of TWrite, TResult)
    nameWithType: Extensions.ReadAll(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{{TResult}},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Boolean,System.Threading.CancellationToken)
  name: ReadAll<TWrite, TResult>(Action<TResult>, Boolean, CancellationToken)
  nameWithType: Extensions.ReadAll<TWrite, TResult>(Action<TResult>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TResult>(System.Action<TResult>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.ReadAll(Of TWrite, TResult)(Action(Of TResult), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TResult)(System.Action(Of TResult), System.Boolean, System.Threading.CancellationToken)
  name.vb: ReadAll(Of TWrite, TResult)(Action(Of TResult), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{``1},System.Boolean,System.Threading.CancellationToken)
    name: ReadAll<TWrite, TResult>
    nameWithType: Extensions.ReadAll<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{``1},System.Boolean,System.Threading.CancellationToken)
    name: ReadAll(Of TWrite, TResult)
    nameWithType: Extensions.ReadAll(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{{TResult}},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)
  name: ReadAll<TWrite, TResult>(Action<TResult>, CancellationToken, Boolean)
  nameWithType: Extensions.ReadAll<TWrite, TResult>(Action<TResult>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TResult>(System.Action<TResult>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.ReadAll(Of TWrite, TResult)(Action(Of TResult), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TResult)(System.Action(Of TResult), System.Threading.CancellationToken, System.Boolean)
  name.vb: ReadAll(Of TWrite, TResult)(Action(Of TResult), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{``1},System.Threading.CancellationToken,System.Boolean)
    name: ReadAll<TWrite, TResult>
    nameWithType: Extensions.ReadAll<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Action{``1},System.Threading.CancellationToken,System.Boolean)
    name: ReadAll(Of TWrite, TResult)
    nameWithType: Extensions.ReadAll(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.CancellationToken,System.Action{{TResult}},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1},System.Boolean)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1},System.Boolean)
  name: ReadAll<TWrite, TResult>(CancellationToken, Action<TResult>, Boolean)
  nameWithType: Extensions.ReadAll<TWrite, TResult>(CancellationToken, Action<TResult>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TResult>(System.Threading.CancellationToken, System.Action<TResult>, System.Boolean)
  nameWithType.vb: Extensions.ReadAll(Of TWrite, TResult)(CancellationToken, Action(Of TResult), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TResult)(System.Threading.CancellationToken, System.Action(Of TResult), System.Boolean)
  name.vb: ReadAll(Of TWrite, TResult)(CancellationToken, Action(Of TResult), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.CancellationToken,System.Action{``1},System.Boolean)
    name: ReadAll<TWrite, TResult>
    nameWithType: Extensions.ReadAll<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.CancellationToken,System.Action{``1},System.Boolean)
    name: ReadAll(Of TWrite, TResult)
    nameWithType: Extensions.ReadAll(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Int32,System.Func{{TResult},System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)
  name: ReadAllConcurrentlyAsync<TWrite, TResult>(Int32, Func<TResult, ValueTask>, CancellationToken)
  nameWithType: Extensions.ReadAllConcurrentlyAsync<TWrite, TResult>(Int32, Func<TResult, ValueTask>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync<TWrite, TResult>(System.Int32, System.Func<TResult, System.Threading.Tasks.ValueTask>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.ReadAllConcurrentlyAsync(Of TWrite, TResult)(Int32, Func(Of TResult, ValueTask), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync(Of TWrite, TResult)(System.Int32, System.Func(Of TResult, System.Threading.Tasks.ValueTask), System.Threading.CancellationToken)
  name.vb: ReadAllConcurrentlyAsync(Of TWrite, TResult)(Int32, Func(Of TResult, ValueTask), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)
    name: ReadAllConcurrentlyAsync<TWrite, TResult>
    nameWithType: Extensions.ReadAllConcurrentlyAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)
    name: ReadAllConcurrentlyAsync(Of TWrite, TResult)
    nameWithType: Extensions.ReadAllConcurrentlyAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Int32,System.Threading.CancellationToken,System.Func{{TResult},System.Threading.Tasks.ValueTask})
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask})
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask})
  name: ReadAllConcurrentlyAsync<TWrite, TResult>(Int32, CancellationToken, Func<TResult, ValueTask>)
  nameWithType: Extensions.ReadAllConcurrentlyAsync<TWrite, TResult>(Int32, CancellationToken, Func<TResult, ValueTask>)
  fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync<TWrite, TResult>(System.Int32, System.Threading.CancellationToken, System.Func<TResult, System.Threading.Tasks.ValueTask>)
  nameWithType.vb: Extensions.ReadAllConcurrentlyAsync(Of TWrite, TResult)(Int32, CancellationToken, Func(Of TResult, ValueTask))
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync(Of TWrite, TResult)(System.Int32, System.Threading.CancellationToken, System.Func(Of TResult, System.Threading.Tasks.ValueTask))
  name.vb: ReadAllConcurrentlyAsync(Of TWrite, TResult)(Int32, CancellationToken, Func(Of TResult, ValueTask))
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Int32,System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask})
    name: ReadAllConcurrentlyAsync<TWrite, TResult>
    nameWithType: Extensions.ReadAllConcurrentlyAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Int32,System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask})
    name: ReadAllConcurrentlyAsync(Of TWrite, TResult)
    nameWithType: Extensions.ReadAllConcurrentlyAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync``2(System.Int32,System.Func{{TResult},System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  name: TaskReadAllConcurrentlyAsync<TWrite, TResult>(Int32, Func<TResult, Task>, CancellationToken)
  nameWithType: Extensions.TaskReadAllConcurrentlyAsync<TWrite, TResult>(Int32, Func<TResult, Task>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync<TWrite, TResult>(System.Int32, System.Func<TResult, System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.TaskReadAllConcurrentlyAsync(Of TWrite, TResult)(Int32, Func(Of TResult, Task), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync(Of TWrite, TResult)(System.Int32, System.Func(Of TResult, System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: TaskReadAllConcurrentlyAsync(Of TWrite, TResult)(Int32, Func(Of TResult, Task), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync``2(System.Int32,System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken)
    name: TaskReadAllConcurrentlyAsync<TWrite, TResult>
    nameWithType: Extensions.TaskReadAllConcurrentlyAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync``2(System.Int32,System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken)
    name: TaskReadAllConcurrentlyAsync(Of TWrite, TResult)
    nameWithType: Extensions.TaskReadAllConcurrentlyAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Int32,System.Action{{TResult}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Action{``1},System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Action{``1},System.Threading.CancellationToken)
  name: ReadAllConcurrently<TWrite, TResult>(Int32, Action<TResult>, CancellationToken)
  nameWithType: Extensions.ReadAllConcurrently<TWrite, TResult>(Int32, Action<TResult>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrently<TWrite, TResult>(System.Int32, System.Action<TResult>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.ReadAllConcurrently(Of TWrite, TResult)(Int32, Action(Of TResult), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllConcurrently(Of TWrite, TResult)(System.Int32, System.Action(Of TResult), System.Threading.CancellationToken)
  name.vb: ReadAllConcurrently(Of TWrite, TResult)(Int32, Action(Of TResult), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Int32,System.Action{``1},System.Threading.CancellationToken)
    name: ReadAllConcurrently<TWrite, TResult>
    nameWithType: Extensions.ReadAllConcurrently<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrently<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Int32,System.Action{``1},System.Threading.CancellationToken)
    name: ReadAllConcurrently(Of TWrite, TResult)
    nameWithType: Extensions.ReadAllConcurrently(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrently(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Int32,System.Threading.CancellationToken,System.Action{{TResult}})
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Action{``1})
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Action{``1})
  name: ReadAllConcurrently<TWrite, TResult>(Int32, CancellationToken, Action<TResult>)
  nameWithType: Extensions.ReadAllConcurrently<TWrite, TResult>(Int32, CancellationToken, Action<TResult>)
  fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrently<TWrite, TResult>(System.Int32, System.Threading.CancellationToken, System.Action<TResult>)
  nameWithType.vb: Extensions.ReadAllConcurrently(Of TWrite, TResult)(Int32, CancellationToken, Action(Of TResult))
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllConcurrently(Of TWrite, TResult)(System.Int32, System.Threading.CancellationToken, System.Action(Of TResult))
  name.vb: ReadAllConcurrently(Of TWrite, TResult)(Int32, CancellationToken, Action(Of TResult))
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Int32,System.Threading.CancellationToken,System.Action{``1})
    name: ReadAllConcurrently<TWrite, TResult>
    nameWithType: Extensions.ReadAllConcurrently<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrently<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Int32,System.Threading.CancellationToken,System.Action{``1})
    name: ReadAllConcurrently(Of TWrite, TResult)
    nameWithType: Extensions.ReadAllConcurrently(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrently(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Func{{TWrite}}},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Boolean,System.Threading.CancellationToken)
  name: SourceAsync<TWrite, TResult>(IEnumerable<Func<TWrite>>, Boolean, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TResult>(IEnumerable<Func<TWrite>>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>(System.Collections.Generic.IEnumerable<System.Func<TWrite>>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TResult)(IEnumerable(Of Func(Of TWrite)), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)(System.Collections.Generic.IEnumerable(Of System.Func(Of TWrite)), System.Boolean, System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TResult)(IEnumerable(Of Func(Of TWrite)), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Func{``0}},System.Boolean,System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TResult>
    nameWithType: Extensions.SourceAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Func{``0}},System.Boolean,System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TResult)
    nameWithType: Extensions.SourceAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Func{{TWrite}}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
  name: SourceAsync<TWrite, TResult>(IEnumerable<Func<TWrite>>, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TResult>(IEnumerable<Func<TWrite>>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>(System.Collections.Generic.IEnumerable<System.Func<TWrite>>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TResult)(IEnumerable(Of Func(Of TWrite)), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)(System.Collections.Generic.IEnumerable(Of System.Func(Of TWrite)), System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TResult)(IEnumerable(Of Func(Of TWrite)), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TResult>
    nameWithType: Extensions.SourceAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TResult)
    nameWithType: Extensions.SourceAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{{TWrite}}},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Boolean,System.Threading.CancellationToken)
  name: SourceAsync<TWrite, TResult>(IEnumerable<ValueTask<TWrite>>, Boolean, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TResult>(IEnumerable<ValueTask<TWrite>>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.ValueTask<TWrite>>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TResult)(IEnumerable(Of ValueTask(Of TWrite)), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.ValueTask(Of TWrite)), System.Boolean, System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TResult)(IEnumerable(Of ValueTask(Of TWrite)), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Boolean,System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TResult>
    nameWithType: Extensions.SourceAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Boolean,System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TResult)
    nameWithType: Extensions.SourceAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{{TWrite}}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
  name: SourceAsync<TWrite, TResult>(IEnumerable<ValueTask<TWrite>>, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TResult>(IEnumerable<ValueTask<TWrite>>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.ValueTask<TWrite>>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TResult)(IEnumerable(Of ValueTask(Of TWrite)), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.ValueTask(Of TWrite)), System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TResult)(IEnumerable(Of ValueTask(Of TWrite)), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TResult>
    nameWithType: Extensions.SourceAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TResult)
    nameWithType: Extensions.SourceAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TWrite}}},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)
  name: SourceAsync<TWrite, TResult>(IEnumerable<Task<TWrite>>, Boolean, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TResult>(IEnumerable<Task<TWrite>>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TWrite>>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TResult)(IEnumerable(Of Task(Of TWrite)), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TWrite)), System.Boolean, System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TResult)(IEnumerable(Of Task(Of TWrite)), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TResult>
    nameWithType: Extensions.SourceAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TResult)
    nameWithType: Extensions.SourceAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TWrite}}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  name: SourceAsync<TWrite, TResult>(IEnumerable<Task<TWrite>>, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TResult>(IEnumerable<Task<TWrite>>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TWrite>>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TResult)(IEnumerable(Of Task(Of TWrite)), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TWrite)), System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TResult)(IEnumerable(Of Task(Of TWrite)), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TResult>
    nameWithType: Extensions.SourceAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TResult)
    nameWithType: Extensions.SourceAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IEnumerable{{TWrite}},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
  name: Source<TWrite, TResult>(IEnumerable<TWrite>, Boolean, CancellationToken)
  nameWithType: Extensions.Source<TWrite, TResult>(IEnumerable<TWrite>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TResult>(System.Collections.Generic.IEnumerable<TWrite>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.Source(Of TWrite, TResult)(IEnumerable(Of TWrite), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.Source(Of TWrite, TResult)(System.Collections.Generic.IEnumerable(Of TWrite), System.Boolean, System.Threading.CancellationToken)
  name.vb: Source(Of TWrite, TResult)(IEnumerable(Of TWrite), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
    name: Source<TWrite, TResult>
    nameWithType: Extensions.Source<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
    name: Source(Of TWrite, TResult)
    nameWithType: Extensions.Source(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.Source(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IEnumerable{{TWrite}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  name: Source<TWrite, TResult>(IEnumerable<TWrite>, CancellationToken)
  nameWithType: Extensions.Source<TWrite, TResult>(IEnumerable<TWrite>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TResult>(System.Collections.Generic.IEnumerable<TWrite>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.Source(Of TWrite, TResult)(IEnumerable(Of TWrite), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.Source(Of TWrite, TResult)(System.Collections.Generic.IEnumerable(Of TWrite), System.Threading.CancellationToken)
  name.vb: Source(Of TWrite, TResult)(IEnumerable(Of TWrite), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
    name: Source<TWrite, TResult>
    nameWithType: Extensions.Source<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
    name: Source(Of TWrite, TResult)
    nameWithType: Extensions.Source(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.Source(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Int32,System.Collections.Generic.IEnumerable{System.Func{{TWrite}}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
  name: SourceAsync<TWrite, TResult>(Int32, IEnumerable<Func<TWrite>>, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TResult>(Int32, IEnumerable<Func<TWrite>>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>(System.Int32, System.Collections.Generic.IEnumerable<System.Func<TWrite>>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TResult)(Int32, IEnumerable(Of Func(Of TWrite)), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)(System.Int32, System.Collections.Generic.IEnumerable(Of System.Func(Of TWrite)), System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TResult)(Int32, IEnumerable(Of Func(Of TWrite)), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Int32,System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TResult>
    nameWithType: Extensions.SourceAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Int32,System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TResult)
    nameWithType: Extensions.SourceAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{{TWrite}}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
  name: SourceAsync<TWrite, TResult>(Int32, IEnumerable<ValueTask<TWrite>>, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TResult>(Int32, IEnumerable<ValueTask<TWrite>>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>(System.Int32, System.Collections.Generic.IEnumerable<System.Threading.Tasks.ValueTask<TWrite>>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TResult)(Int32, IEnumerable(Of ValueTask(Of TWrite)), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)(System.Int32, System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.ValueTask(Of TWrite)), System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TResult)(Int32, IEnumerable(Of ValueTask(Of TWrite)), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TResult>
    nameWithType: Extensions.SourceAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TResult)
    nameWithType: Extensions.SourceAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.SourceAsync``2(System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TWrite}}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  name: SourceAsync<TWrite, TResult>(Int32, IEnumerable<Task<TWrite>>, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TResult>(Int32, IEnumerable<Task<TWrite>>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>(System.Int32, System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TWrite>>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TResult)(Int32, IEnumerable(Of Task(Of TWrite)), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)(System.Int32, System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TWrite)), System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TResult)(Int32, IEnumerable(Of Task(Of TWrite)), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TResult>
    nameWithType: Extensions.SourceAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TResult)
    nameWithType: Extensions.SourceAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IAsyncEnumerable{{TWrite}},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
  name: Source<TWrite, TResult>(IAsyncEnumerable<TWrite>, Boolean, CancellationToken)
  nameWithType: Extensions.Source<TWrite, TResult>(IAsyncEnumerable<TWrite>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TResult>(System.Collections.Generic.IAsyncEnumerable<TWrite>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.Source(Of TWrite, TResult)(IAsyncEnumerable(Of TWrite), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.Source(Of TWrite, TResult)(System.Collections.Generic.IAsyncEnumerable(Of TWrite), System.Boolean, System.Threading.CancellationToken)
  name.vb: Source(Of TWrite, TResult)(IAsyncEnumerable(Of TWrite), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
    name: Source<TWrite, TResult>
    nameWithType: Extensions.Source<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
    name: Source(Of TWrite, TResult)
    nameWithType: Extensions.Source(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.Source(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IAsyncEnumerable{{TWrite}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)
  name: Source<TWrite, TResult>(IAsyncEnumerable<TWrite>, CancellationToken)
  nameWithType: Extensions.Source<TWrite, TResult>(IAsyncEnumerable<TWrite>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TResult>(System.Collections.Generic.IAsyncEnumerable<TWrite>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.Source(Of TWrite, TResult)(IAsyncEnumerable(Of TWrite), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.Source(Of TWrite, TResult)(System.Collections.Generic.IAsyncEnumerable(Of TWrite), System.Threading.CancellationToken)
  name.vb: Source(Of TWrite, TResult)(IAsyncEnumerable(Of TWrite), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)
    name: Source<TWrite, TResult>
    nameWithType: Extensions.Source<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)
    name: Source(Of TWrite, TResult)
    nameWithType: Extensions.Source(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.Source(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.Transform``3(System.Func{{TResult},{TResult}})
  commentId: M:Open.ChannelExtensions.Extensions.Transform``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2})
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.Transform``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2})
  name: Transform<TWrite, TResult, TResult>(Func<TResult, TResult>)
  nameWithType: Extensions.Transform<TWrite, TResult, TResult>(Func<TResult, TResult>)
  fullName: Open.ChannelExtensions.Extensions.Transform<TWrite, TResult, TResult>(System.Func<TResult, TResult>)
  nameWithType.vb: Extensions.Transform(Of TWrite, TResult, TResult)(Func(Of TResult, TResult))
  fullName.vb: Open.ChannelExtensions.Extensions.Transform(Of TWrite, TResult, TResult)(System.Func(Of TResult, TResult))
  name.vb: Transform(Of TWrite, TResult, TResult)(Func(Of TResult, TResult))
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Transform``3(System.Func{``1,``2})
    name: Transform<TWrite, TResult, TResult>
    nameWithType: Extensions.Transform<TWrite, TResult, TResult>
    fullName: Open.ChannelExtensions.Extensions.Transform<TWrite, TResult, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Transform``3(System.Func{``1,``2})
    name: Transform(Of TWrite, TResult, TResult)
    nameWithType: Extensions.Transform(Of TWrite, TResult, TResult)
    fullName: Open.ChannelExtensions.Extensions.Transform(Of TWrite, TResult, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.CompleteAsync``2(System.Exception)
  commentId: M:Open.ChannelExtensions.Extensions.CompleteAsync``2(System.Threading.Channels.Channel{``0,``1},System.Exception)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.CompleteAsync``2(System.Threading.Channels.Channel{``0,``1},System.Exception)
  name: CompleteAsync<TWrite, TResult>(Exception)
  nameWithType: Extensions.CompleteAsync<TWrite, TResult>(Exception)
  fullName: Open.ChannelExtensions.Extensions.CompleteAsync<TWrite, TResult>(System.Exception)
  nameWithType.vb: Extensions.CompleteAsync(Of TWrite, TResult)(Exception)
  fullName.vb: Open.ChannelExtensions.Extensions.CompleteAsync(Of TWrite, TResult)(System.Exception)
  name.vb: CompleteAsync(Of TWrite, TResult)(Exception)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.CompleteAsync``2(System.Exception)
    name: CompleteAsync<TWrite, TResult>
    nameWithType: Extensions.CompleteAsync<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.CompleteAsync<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.CompleteAsync``2(System.Exception)
    name: CompleteAsync(Of TWrite, TResult)
    nameWithType: Extensions.CompleteAsync(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.CompleteAsync(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels.Channel{`0,`2}.Open.ChannelExtensions.Extensions.AsAsyncEnumerable``2(System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.AsAsyncEnumerable``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken)
  parent: Open.ChannelExtensions.Extensions
  definition: Open.ChannelExtensions.Extensions.AsAsyncEnumerable``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken)
  name: AsAsyncEnumerable<TWrite, TResult>(CancellationToken)
  nameWithType: Extensions.AsAsyncEnumerable<TWrite, TResult>(CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.AsAsyncEnumerable<TWrite, TResult>(System.Threading.CancellationToken)
  nameWithType.vb: Extensions.AsAsyncEnumerable(Of TWrite, TResult)(CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.AsAsyncEnumerable(Of TWrite, TResult)(System.Threading.CancellationToken)
  name.vb: AsAsyncEnumerable(Of TWrite, TResult)(CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.AsAsyncEnumerable``2(System.Threading.CancellationToken)
    name: AsAsyncEnumerable<TWrite, TResult>
    nameWithType: Extensions.AsAsyncEnumerable<TWrite, TResult>
    fullName: Open.ChannelExtensions.Extensions.AsAsyncEnumerable<TWrite, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.AsAsyncEnumerable``2(System.Threading.CancellationToken)
    name: AsAsyncEnumerable(Of TWrite, TResult)
    nameWithType: Extensions.AsAsyncEnumerable(Of TWrite, TResult)
    fullName: Open.ChannelExtensions.Extensions.AsAsyncEnumerable(Of TWrite, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Channels.Channel`2
  commentId: T:System.Threading.Channels.Channel`2
  isExternal: true
  name: Channel<TWrite, TRead>
  nameWithType: Channel<TWrite, TRead>
  fullName: System.Threading.Channels.Channel<TWrite, TRead>
  nameWithType.vb: Channel(Of TWrite, TRead)
  fullName.vb: System.Threading.Channels.Channel(Of TWrite, TRead)
  name.vb: Channel(Of TWrite, TRead)
  spec.csharp:
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Channels
  commentId: N:System.Threading.Channels
  isExternal: true
  name: System.Threading.Channels
  nameWithType: System.Threading.Channels
  fullName: System.Threading.Channels
- uid: System.Threading.Channels.Channel`2.Reader
  commentId: P:System.Threading.Channels.Channel`2.Reader
  isExternal: true
  name: Reader
  nameWithType: Channel<TWrite, TRead>.Reader
  fullName: System.Threading.Channels.Channel<TWrite, TRead>.Reader
  nameWithType.vb: Channel(Of TWrite, TRead).Reader
  fullName.vb: System.Threading.Channels.Channel(Of TWrite, TRead).Reader
- uid: System.Threading.Channels.Channel`2.Writer
  commentId: P:System.Threading.Channels.Channel`2.Writer
  isExternal: true
  name: Writer
  nameWithType: Channel<TWrite, TRead>.Writer
  fullName: System.Threading.Channels.Channel<TWrite, TRead>.Writer
  nameWithType.vb: Channel(Of TWrite, TRead).Writer
  fullName.vb: System.Threading.Channels.Channel(Of TWrite, TRead).Writer
- uid: Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: PipeAsync<TWrite, TRead, TOut>(Channel<TWrite, TRead>, Int32, Func<TRead, ValueTask<TOut>>, Int32, Boolean, CancellationToken)
  nameWithType: Extensions.PipeAsync<TWrite, TRead, TOut>(Channel<TWrite, TRead>, Int32, Func<TRead, ValueTask<TOut>>, Int32, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.PipeAsync<TWrite, TRead, TOut>(System.Threading.Channels.Channel<TWrite, TRead>, System.Int32, System.Func<TRead, System.Threading.Tasks.ValueTask<TOut>>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.PipeAsync(Of TWrite, TRead, TOut)(Channel(Of TWrite, TRead), Int32, Func(Of TRead, ValueTask(Of TOut)), Int32, Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.PipeAsync(Of TWrite, TRead, TOut)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Int32, System.Func(Of TRead, System.Threading.Tasks.ValueTask(Of TOut)), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: PipeAsync(Of TWrite, TRead, TOut)(Channel(Of TWrite, TRead), Int32, Func(Of TRead, ValueTask(Of TOut)), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: PipeAsync<TWrite, TRead, TOut>
    nameWithType: Extensions.PipeAsync<TWrite, TRead, TOut>
    fullName: Open.ChannelExtensions.Extensions.PipeAsync<TWrite, TRead, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: PipeAsync(Of TWrite, TRead, TOut)
    nameWithType: Extensions.PipeAsync(Of TWrite, TRead, TOut)
    fullName: Open.ChannelExtensions.Extensions.PipeAsync(Of TWrite, TRead, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions
  commentId: T:Open.ChannelExtensions.Extensions
  parent: Open.ChannelExtensions
  name: Extensions
  nameWithType: Extensions
  fullName: Open.ChannelExtensions.Extensions
- uid: Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: TaskPipeAsync<TWrite, TRead, TOut>(Channel<TWrite, TRead>, Int32, Func<TRead, Task<TOut>>, Int32, Boolean, CancellationToken)
  nameWithType: Extensions.TaskPipeAsync<TWrite, TRead, TOut>(Channel<TWrite, TRead>, Int32, Func<TRead, Task<TOut>>, Int32, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.TaskPipeAsync<TWrite, TRead, TOut>(System.Threading.Channels.Channel<TWrite, TRead>, System.Int32, System.Func<TRead, System.Threading.Tasks.Task<TOut>>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.TaskPipeAsync(Of TWrite, TRead, TOut)(Channel(Of TWrite, TRead), Int32, Func(Of TRead, Task(Of TOut)), Int32, Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskPipeAsync(Of TWrite, TRead, TOut)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Int32, System.Func(Of TRead, System.Threading.Tasks.Task(Of TOut)), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: TaskPipeAsync(Of TWrite, TRead, TOut)(Channel(Of TWrite, TRead), Int32, Func(Of TRead, Task(Of TOut)), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: TaskPipeAsync<TWrite, TRead, TOut>
    nameWithType: Extensions.TaskPipeAsync<TWrite, TRead, TOut>
    fullName: Open.ChannelExtensions.Extensions.TaskPipeAsync<TWrite, TRead, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: TaskPipeAsync(Of TWrite, TRead, TOut)
    nameWithType: Extensions.TaskPipeAsync(Of TWrite, TRead, TOut)
    fullName: Open.ChannelExtensions.Extensions.TaskPipeAsync(Of TWrite, TRead, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: Pipe<TWrite, TRead, TOut>(Channel<TWrite, TRead>, Int32, Func<TRead, TOut>, Int32, Boolean, CancellationToken)
  nameWithType: Extensions.Pipe<TWrite, TRead, TOut>(Channel<TWrite, TRead>, Int32, Func<TRead, TOut>, Int32, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.Pipe<TWrite, TRead, TOut>(System.Threading.Channels.Channel<TWrite, TRead>, System.Int32, System.Func<TRead, TOut>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.Pipe(Of TWrite, TRead, TOut)(Channel(Of TWrite, TRead), Int32, Func(Of TRead, TOut), Int32, Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.Pipe(Of TWrite, TRead, TOut)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Int32, System.Func(Of TRead, TOut), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: Pipe(Of TWrite, TRead, TOut)(Channel(Of TWrite, TRead), Int32, Func(Of TRead, TOut), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: Pipe<TWrite, TRead, TOut>
    nameWithType: Extensions.Pipe<TWrite, TRead, TOut>
    fullName: Open.ChannelExtensions.Extensions.Pipe<TWrite, TRead, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: Pipe(Of TWrite, TRead, TOut)
    nameWithType: Extensions.Pipe(Of TWrite, TRead, TOut)
    fullName: Open.ChannelExtensions.Extensions.Pipe(Of TWrite, TRead, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: PipeAsync<TWrite, TRead, TOut>(Channel<TWrite, TRead>, Func<TRead, ValueTask<TOut>>, Int32, Boolean, CancellationToken)
  nameWithType: Extensions.PipeAsync<TWrite, TRead, TOut>(Channel<TWrite, TRead>, Func<TRead, ValueTask<TOut>>, Int32, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.PipeAsync<TWrite, TRead, TOut>(System.Threading.Channels.Channel<TWrite, TRead>, System.Func<TRead, System.Threading.Tasks.ValueTask<TOut>>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.PipeAsync(Of TWrite, TRead, TOut)(Channel(Of TWrite, TRead), Func(Of TRead, ValueTask(Of TOut)), Int32, Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.PipeAsync(Of TWrite, TRead, TOut)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Func(Of TRead, System.Threading.Tasks.ValueTask(Of TOut)), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: PipeAsync(Of TWrite, TRead, TOut)(Channel(Of TWrite, TRead), Func(Of TRead, ValueTask(Of TOut)), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: PipeAsync<TWrite, TRead, TOut>
    nameWithType: Extensions.PipeAsync<TWrite, TRead, TOut>
    fullName: Open.ChannelExtensions.Extensions.PipeAsync<TWrite, TRead, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: PipeAsync(Of TWrite, TRead, TOut)
    nameWithType: Extensions.PipeAsync(Of TWrite, TRead, TOut)
    fullName: Open.ChannelExtensions.Extensions.PipeAsync(Of TWrite, TRead, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: TaskPipeAsync<TWrite, TRead, TOut>(Channel<TWrite, TRead>, Func<TRead, Task<TOut>>, Int32, Boolean, CancellationToken)
  nameWithType: Extensions.TaskPipeAsync<TWrite, TRead, TOut>(Channel<TWrite, TRead>, Func<TRead, Task<TOut>>, Int32, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.TaskPipeAsync<TWrite, TRead, TOut>(System.Threading.Channels.Channel<TWrite, TRead>, System.Func<TRead, System.Threading.Tasks.Task<TOut>>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.TaskPipeAsync(Of TWrite, TRead, TOut)(Channel(Of TWrite, TRead), Func(Of TRead, Task(Of TOut)), Int32, Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskPipeAsync(Of TWrite, TRead, TOut)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Func(Of TRead, System.Threading.Tasks.Task(Of TOut)), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: TaskPipeAsync(Of TWrite, TRead, TOut)(Channel(Of TWrite, TRead), Func(Of TRead, Task(Of TOut)), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: TaskPipeAsync<TWrite, TRead, TOut>
    nameWithType: Extensions.TaskPipeAsync<TWrite, TRead, TOut>
    fullName: Open.ChannelExtensions.Extensions.TaskPipeAsync<TWrite, TRead, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: TaskPipeAsync(Of TWrite, TRead, TOut)
    nameWithType: Extensions.TaskPipeAsync(Of TWrite, TRead, TOut)
    fullName: Open.ChannelExtensions.Extensions.TaskPipeAsync(Of TWrite, TRead, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: Pipe<TWrite, TRead, TOut>(Channel<TWrite, TRead>, Func<TRead, TOut>, Int32, Boolean, CancellationToken)
  nameWithType: Extensions.Pipe<TWrite, TRead, TOut>(Channel<TWrite, TRead>, Func<TRead, TOut>, Int32, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.Pipe<TWrite, TRead, TOut>(System.Threading.Channels.Channel<TWrite, TRead>, System.Func<TRead, TOut>, System.Int32, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.Pipe(Of TWrite, TRead, TOut)(Channel(Of TWrite, TRead), Func(Of TRead, TOut), Int32, Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.Pipe(Of TWrite, TRead, TOut)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Func(Of TRead, TOut), System.Int32, System.Boolean, System.Threading.CancellationToken)
  name.vb: Pipe(Of TWrite, TRead, TOut)(Channel(Of TWrite, TRead), Func(Of TRead, TOut), Int32, Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: Pipe<TWrite, TRead, TOut>
    nameWithType: Extensions.Pipe<TWrite, TRead, TOut>
    fullName: Open.ChannelExtensions.Extensions.Pipe<TWrite, TRead, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)
    name: Pipe(Of TWrite, TRead, TOut)
    nameWithType: Extensions.Pipe(Of TWrite, TRead, TOut)
    fullName: Open.ChannelExtensions.Extensions.Pipe(Of TWrite, TRead, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
  isExternal: true
  name: ReadUntilCancelledAsync<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Func<TRead, Int64, ValueTask>, Boolean)
  nameWithType: Extensions.ReadUntilCancelledAsync<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Func<TRead, Int64, ValueTask>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Threading.CancellationToken, System.Func<TRead, System.Int64, System.Threading.Tasks.ValueTask>, System.Boolean)
  nameWithType.vb: Extensions.ReadUntilCancelledAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Func(Of TRead, Int64, ValueTask), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Threading.CancellationToken, System.Func(Of TRead, System.Int64, System.Threading.Tasks.ValueTask), System.Boolean)
  name.vb: ReadUntilCancelledAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Func(Of TRead, Int64, ValueTask), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadUntilCancelledAsync<TWrite, TRead>
    nameWithType: Extensions.ReadUntilCancelledAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadUntilCancelledAsync(Of TWrite, TRead)
    nameWithType: Extensions.ReadUntilCancelledAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
  isExternal: true
  name: ReadUntilCancelledAsync<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Func<TRead, ValueTask>, Boolean)
  nameWithType: Extensions.ReadUntilCancelledAsync<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Func<TRead, ValueTask>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Threading.CancellationToken, System.Func<TRead, System.Threading.Tasks.ValueTask>, System.Boolean)
  nameWithType.vb: Extensions.ReadUntilCancelledAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Func(Of TRead, ValueTask), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Threading.CancellationToken, System.Func(Of TRead, System.Threading.Tasks.ValueTask), System.Boolean)
  name.vb: ReadUntilCancelledAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Func(Of TRead, ValueTask), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadUntilCancelledAsync<TWrite, TRead>
    nameWithType: Extensions.ReadUntilCancelledAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadUntilCancelledAsync(Of TWrite, TRead)
    nameWithType: Extensions.ReadUntilCancelledAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
  isExternal: true
  name: ReadUntilCancelled<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Action<TRead, Int64>, Boolean)
  nameWithType: Extensions.ReadUntilCancelled<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Action<TRead, Int64>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelled<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Threading.CancellationToken, System.Action<TRead, System.Int64>, System.Boolean)
  nameWithType.vb: Extensions.ReadUntilCancelled(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Action(Of TRead, Int64), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadUntilCancelled(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Threading.CancellationToken, System.Action(Of TRead, System.Int64), System.Boolean)
  name.vb: ReadUntilCancelled(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Action(Of TRead, Int64), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
    name: ReadUntilCancelled<TWrite, TRead>
    nameWithType: Extensions.ReadUntilCancelled<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelled<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
    name: ReadUntilCancelled(Of TWrite, TRead)
    nameWithType: Extensions.ReadUntilCancelled(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelled(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: ReadUntilCancelled<TWrite, TRead>(Channel<TWrite, TRead>, Action<TRead>, CancellationToken, Boolean)
  nameWithType: Extensions.ReadUntilCancelled<TWrite, TRead>(Channel<TWrite, TRead>, Action<TRead>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelled<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Action<TRead>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.ReadUntilCancelled(Of TWrite, TRead)(Channel(Of TWrite, TRead), Action(Of TRead), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadUntilCancelled(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Action(Of TRead), System.Threading.CancellationToken, System.Boolean)
  name.vb: ReadUntilCancelled(Of TWrite, TRead)(Channel(Of TWrite, TRead), Action(Of TRead), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)
    name: ReadUntilCancelled<TWrite, TRead>
    nameWithType: Extensions.ReadUntilCancelled<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelled<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)
    name: ReadUntilCancelled(Of TWrite, TRead)
    nameWithType: Extensions.ReadUntilCancelled(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadUntilCancelled(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: ReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, Int64, ValueTask>, Boolean, CancellationToken)
  nameWithType: Extensions.ReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, Int64, ValueTask>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Func<TRead, System.Int64, System.Threading.Tasks.ValueTask>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.ReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, Int64, ValueTask), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Func(Of TRead, System.Int64, System.Threading.Tasks.ValueTask), System.Boolean, System.Threading.CancellationToken)
  name.vb: ReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, Int64, ValueTask), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
    name: ReadAllAsync<TWrite, TRead>
    nameWithType: Extensions.ReadAllAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
    name: ReadAllAsync(Of TWrite, TRead)
    nameWithType: Extensions.ReadAllAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: ReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, Int64, ValueTask>, CancellationToken, Boolean)
  nameWithType: Extensions.ReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, Int64, ValueTask>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Func<TRead, System.Int64, System.Threading.Tasks.ValueTask>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.ReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, Int64, ValueTask), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Func(Of TRead, System.Int64, System.Threading.Tasks.ValueTask), System.Threading.CancellationToken, System.Boolean)
  name.vb: ReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, Int64, ValueTask), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
    name: ReadAllAsync<TWrite, TRead>
    nameWithType: Extensions.ReadAllAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
    name: ReadAllAsync(Of TWrite, TRead)
    nameWithType: Extensions.ReadAllAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
  isExternal: true
  name: ReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Func<TRead, Int64, ValueTask>, Boolean)
  nameWithType: Extensions.ReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Func<TRead, Int64, ValueTask>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Threading.CancellationToken, System.Func<TRead, System.Int64, System.Threading.Tasks.ValueTask>, System.Boolean)
  nameWithType.vb: Extensions.ReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Func(Of TRead, Int64, ValueTask), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Threading.CancellationToken, System.Func(Of TRead, System.Int64, System.Threading.Tasks.ValueTask), System.Boolean)
  name.vb: ReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Func(Of TRead, Int64, ValueTask), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadAllAsync<TWrite, TRead>
    nameWithType: Extensions.ReadAllAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadAllAsync(Of TWrite, TRead)
    nameWithType: Extensions.ReadAllAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: TaskReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, Int64, Task>, Boolean, CancellationToken)
  nameWithType: Extensions.TaskReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, Int64, Task>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Func<TRead, System.Int64, System.Threading.Tasks.Task>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.TaskReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, Int64, Task), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Func(Of TRead, System.Int64, System.Threading.Tasks.Task), System.Boolean, System.Threading.CancellationToken)
  name.vb: TaskReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, Int64, Task), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
    name: TaskReadAllAsync<TWrite, TRead>
    nameWithType: Extensions.TaskReadAllAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
    name: TaskReadAllAsync(Of TWrite, TRead)
    nameWithType: Extensions.TaskReadAllAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: TaskReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, Int64, Task>, CancellationToken, Boolean)
  nameWithType: Extensions.TaskReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, Int64, Task>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Func<TRead, System.Int64, System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.TaskReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, Int64, Task), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Func(Of TRead, System.Int64, System.Threading.Tasks.Task), System.Threading.CancellationToken, System.Boolean)
  name.vb: TaskReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, Int64, Task), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
    name: TaskReadAllAsync<TWrite, TRead>
    nameWithType: Extensions.TaskReadAllAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
    name: TaskReadAllAsync(Of TWrite, TRead)
    nameWithType: Extensions.TaskReadAllAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean)
  isExternal: true
  name: TaskReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Func<TRead, Int64, Task>, Boolean)
  nameWithType: Extensions.TaskReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Func<TRead, Int64, Task>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Threading.CancellationToken, System.Func<TRead, System.Int64, System.Threading.Tasks.Task>, System.Boolean)
  nameWithType.vb: Extensions.TaskReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Func(Of TRead, Int64, Task), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Threading.CancellationToken, System.Func(Of TRead, System.Int64, System.Threading.Tasks.Task), System.Boolean)
  name.vb: TaskReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Func(Of TRead, Int64, Task), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean)
    name: TaskReadAllAsync<TWrite, TRead>
    nameWithType: Extensions.TaskReadAllAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean)
    name: TaskReadAllAsync(Of TWrite, TRead)
    nameWithType: Extensions.TaskReadAllAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: TaskReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, Task>, Boolean, CancellationToken)
  nameWithType: Extensions.TaskReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, Task>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Func<TRead, System.Threading.Tasks.Task>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.TaskReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, Task), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Func(Of TRead, System.Threading.Tasks.Task), System.Boolean, System.Threading.CancellationToken)
  name.vb: TaskReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, Task), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
    name: TaskReadAllAsync<TWrite, TRead>
    nameWithType: Extensions.TaskReadAllAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)
    name: TaskReadAllAsync(Of TWrite, TRead)
    nameWithType: Extensions.TaskReadAllAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: TaskReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, Task>, CancellationToken, Boolean)
  nameWithType: Extensions.TaskReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, Task>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Func<TRead, System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.TaskReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, Task), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Func(Of TRead, System.Threading.Tasks.Task), System.Threading.CancellationToken, System.Boolean)
  name.vb: TaskReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, Task), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
    name: TaskReadAllAsync<TWrite, TRead>
    nameWithType: Extensions.TaskReadAllAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)
    name: TaskReadAllAsync(Of TWrite, TRead)
    nameWithType: Extensions.TaskReadAllAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.Task},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.Task},System.Boolean)
  isExternal: true
  name: TaskReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Func<TRead, Task>, Boolean)
  nameWithType: Extensions.TaskReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Func<TRead, Task>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Threading.CancellationToken, System.Func<TRead, System.Threading.Tasks.Task>, System.Boolean)
  nameWithType.vb: Extensions.TaskReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Func(Of TRead, Task), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Threading.CancellationToken, System.Func(Of TRead, System.Threading.Tasks.Task), System.Boolean)
  name.vb: TaskReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Func(Of TRead, Task), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.Task},System.Boolean)
    name: TaskReadAllAsync<TWrite, TRead>
    nameWithType: Extensions.TaskReadAllAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.Task},System.Boolean)
    name: TaskReadAllAsync(Of TWrite, TRead)
    nameWithType: Extensions.TaskReadAllAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: ReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, ValueTask>, Boolean, CancellationToken)
  nameWithType: Extensions.ReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, ValueTask>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Func<TRead, System.Threading.Tasks.ValueTask>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.ReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, ValueTask), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Func(Of TRead, System.Threading.Tasks.ValueTask), System.Boolean, System.Threading.CancellationToken)
  name.vb: ReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, ValueTask), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
    name: ReadAllAsync<TWrite, TRead>
    nameWithType: Extensions.ReadAllAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)
    name: ReadAllAsync(Of TWrite, TRead)
    nameWithType: Extensions.ReadAllAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: ReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, ValueTask>, CancellationToken, Boolean)
  nameWithType: Extensions.ReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, Func<TRead, ValueTask>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Func<TRead, System.Threading.Tasks.ValueTask>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.ReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, ValueTask), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Func(Of TRead, System.Threading.Tasks.ValueTask), System.Threading.CancellationToken, System.Boolean)
  name.vb: ReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Func(Of TRead, ValueTask), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
    name: ReadAllAsync<TWrite, TRead>
    nameWithType: Extensions.ReadAllAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)
    name: ReadAllAsync(Of TWrite, TRead)
    nameWithType: Extensions.ReadAllAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
  isExternal: true
  name: ReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Func<TRead, ValueTask>, Boolean)
  nameWithType: Extensions.ReadAllAsync<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Func<TRead, ValueTask>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Threading.CancellationToken, System.Func<TRead, System.Threading.Tasks.ValueTask>, System.Boolean)
  nameWithType.vb: Extensions.ReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Func(Of TRead, ValueTask), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Threading.CancellationToken, System.Func(Of TRead, System.Threading.Tasks.ValueTask), System.Boolean)
  name.vb: ReadAllAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Func(Of TRead, ValueTask), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadAllAsync<TWrite, TRead>
    nameWithType: Extensions.ReadAllAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)
    name: ReadAllAsync(Of TWrite, TRead)
    nameWithType: Extensions.ReadAllAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAllAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: ReadAll<TWrite, TRead>(Channel<TWrite, TRead>, Action<TRead, Int64>, Boolean, CancellationToken)
  nameWithType: Extensions.ReadAll<TWrite, TRead>(Channel<TWrite, TRead>, Action<TRead, Int64>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Action<TRead, System.Int64>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.ReadAll(Of TWrite, TRead)(Channel(Of TWrite, TRead), Action(Of TRead, Int64), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Action(Of TRead, System.Int64), System.Boolean, System.Threading.CancellationToken)
  name.vb: ReadAll(Of TWrite, TRead)(Channel(Of TWrite, TRead), Action(Of TRead, Int64), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Boolean,System.Threading.CancellationToken)
    name: ReadAll<TWrite, TRead>
    nameWithType: Extensions.ReadAll<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Boolean,System.Threading.CancellationToken)
    name: ReadAll(Of TWrite, TRead)
    nameWithType: Extensions.ReadAll(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: ReadAll<TWrite, TRead>(Channel<TWrite, TRead>, Action<TRead, Int64>, CancellationToken, Boolean)
  nameWithType: Extensions.ReadAll<TWrite, TRead>(Channel<TWrite, TRead>, Action<TRead, Int64>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Action<TRead, System.Int64>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.ReadAll(Of TWrite, TRead)(Channel(Of TWrite, TRead), Action(Of TRead, Int64), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Action(Of TRead, System.Int64), System.Threading.CancellationToken, System.Boolean)
  name.vb: ReadAll(Of TWrite, TRead)(Channel(Of TWrite, TRead), Action(Of TRead, Int64), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Threading.CancellationToken,System.Boolean)
    name: ReadAll<TWrite, TRead>
    nameWithType: Extensions.ReadAll<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Threading.CancellationToken,System.Boolean)
    name: ReadAll(Of TWrite, TRead)
    nameWithType: Extensions.ReadAll(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
  isExternal: true
  name: ReadAll<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Action<TRead, Int64>, Boolean)
  nameWithType: Extensions.ReadAll<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Action<TRead, Int64>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Threading.CancellationToken, System.Action<TRead, System.Int64>, System.Boolean)
  nameWithType.vb: Extensions.ReadAll(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Action(Of TRead, Int64), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Threading.CancellationToken, System.Action(Of TRead, System.Int64), System.Boolean)
  name.vb: ReadAll(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Action(Of TRead, Int64), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
    name: ReadAll<TWrite, TRead>
    nameWithType: Extensions.ReadAll<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)
    name: ReadAll(Of TWrite, TRead)
    nameWithType: Extensions.ReadAll(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: ReadAll<TWrite, TRead>(Channel<TWrite, TRead>, Action<TRead>, Boolean, CancellationToken)
  nameWithType: Extensions.ReadAll<TWrite, TRead>(Channel<TWrite, TRead>, Action<TRead>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Action<TRead>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.ReadAll(Of TWrite, TRead)(Channel(Of TWrite, TRead), Action(Of TRead), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Action(Of TRead), System.Boolean, System.Threading.CancellationToken)
  name.vb: ReadAll(Of TWrite, TRead)(Channel(Of TWrite, TRead), Action(Of TRead), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Boolean,System.Threading.CancellationToken)
    name: ReadAll<TWrite, TRead>
    nameWithType: Extensions.ReadAll<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Boolean,System.Threading.CancellationToken)
    name: ReadAll(Of TWrite, TRead)
    nameWithType: Extensions.ReadAll(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: ReadAll<TWrite, TRead>(Channel<TWrite, TRead>, Action<TRead>, CancellationToken, Boolean)
  nameWithType: Extensions.ReadAll<TWrite, TRead>(Channel<TWrite, TRead>, Action<TRead>, CancellationToken, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Action<TRead>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: Extensions.ReadAll(Of TWrite, TRead)(Channel(Of TWrite, TRead), Action(Of TRead), CancellationToken, Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Action(Of TRead), System.Threading.CancellationToken, System.Boolean)
  name.vb: ReadAll(Of TWrite, TRead)(Channel(Of TWrite, TRead), Action(Of TRead), CancellationToken, Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)
    name: ReadAll<TWrite, TRead>
    nameWithType: Extensions.ReadAll<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)
    name: ReadAll(Of TWrite, TRead)
    nameWithType: Extensions.ReadAll(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1},System.Boolean)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1},System.Boolean)
  isExternal: true
  name: ReadAll<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Action<TRead>, Boolean)
  nameWithType: Extensions.ReadAll<TWrite, TRead>(Channel<TWrite, TRead>, CancellationToken, Action<TRead>, Boolean)
  fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Threading.CancellationToken, System.Action<TRead>, System.Boolean)
  nameWithType.vb: Extensions.ReadAll(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Action(Of TRead), Boolean)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Threading.CancellationToken, System.Action(Of TRead), System.Boolean)
  name.vb: ReadAll(Of TWrite, TRead)(Channel(Of TWrite, TRead), CancellationToken, Action(Of TRead), Boolean)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1},System.Boolean)
    name: ReadAll<TWrite, TRead>
    nameWithType: Extensions.ReadAll<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAll<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1},System.Boolean)
    name: ReadAll(Of TWrite, TRead)
    nameWithType: Extensions.ReadAll(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAll(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)
  isExternal: true
  name: ReadAllConcurrentlyAsync<TWrite, TRead>(Channel<TWrite, TRead>, Int32, Func<TRead, ValueTask>, CancellationToken)
  nameWithType: Extensions.ReadAllConcurrentlyAsync<TWrite, TRead>(Channel<TWrite, TRead>, Int32, Func<TRead, ValueTask>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Int32, System.Func<TRead, System.Threading.Tasks.ValueTask>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.ReadAllConcurrentlyAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, Func(Of TRead, ValueTask), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Int32, System.Func(Of TRead, System.Threading.Tasks.ValueTask), System.Threading.CancellationToken)
  name.vb: ReadAllConcurrentlyAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, Func(Of TRead, ValueTask), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)
    name: ReadAllConcurrentlyAsync<TWrite, TRead>
    nameWithType: Extensions.ReadAllConcurrentlyAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)
    name: ReadAllConcurrentlyAsync(Of TWrite, TRead)
    nameWithType: Extensions.ReadAllConcurrentlyAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask})
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask})
  isExternal: true
  name: ReadAllConcurrentlyAsync<TWrite, TRead>(Channel<TWrite, TRead>, Int32, CancellationToken, Func<TRead, ValueTask>)
  nameWithType: Extensions.ReadAllConcurrentlyAsync<TWrite, TRead>(Channel<TWrite, TRead>, Int32, CancellationToken, Func<TRead, ValueTask>)
  fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Int32, System.Threading.CancellationToken, System.Func<TRead, System.Threading.Tasks.ValueTask>)
  nameWithType.vb: Extensions.ReadAllConcurrentlyAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, CancellationToken, Func(Of TRead, ValueTask))
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Int32, System.Threading.CancellationToken, System.Func(Of TRead, System.Threading.Tasks.ValueTask))
  name.vb: ReadAllConcurrentlyAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, CancellationToken, Func(Of TRead, ValueTask))
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask})
    name: ReadAllConcurrentlyAsync<TWrite, TRead>
    nameWithType: Extensions.ReadAllConcurrentlyAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask})
    name: ReadAllConcurrentlyAsync(Of TWrite, TRead)
    nameWithType: Extensions.ReadAllConcurrentlyAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ValueTask
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  isExternal: true
  name: TaskReadAllConcurrentlyAsync<TWrite, TRead>(Channel<TWrite, TRead>, Int32, Func<TRead, Task>, CancellationToken)
  nameWithType: Extensions.TaskReadAllConcurrentlyAsync<TWrite, TRead>(Channel<TWrite, TRead>, Int32, Func<TRead, Task>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Int32, System.Func<TRead, System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.TaskReadAllConcurrentlyAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, Func(Of TRead, Task), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Int32, System.Func(Of TRead, System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: TaskReadAllConcurrentlyAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, Func(Of TRead, Task), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken)
    name: TaskReadAllConcurrentlyAsync<TWrite, TRead>
    nameWithType: Extensions.TaskReadAllConcurrentlyAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken)
    name: TaskReadAllConcurrentlyAsync(Of TWrite, TRead)
    nameWithType: Extensions.TaskReadAllConcurrentlyAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Action{``1},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Action{``1},System.Threading.CancellationToken)
  isExternal: true
  name: ReadAllConcurrently<TWrite, TRead>(Channel<TWrite, TRead>, Int32, Action<TRead>, CancellationToken)
  nameWithType: Extensions.ReadAllConcurrently<TWrite, TRead>(Channel<TWrite, TRead>, Int32, Action<TRead>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrently<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Int32, System.Action<TRead>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.ReadAllConcurrently(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, Action(Of TRead), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllConcurrently(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Int32, System.Action(Of TRead), System.Threading.CancellationToken)
  name.vb: ReadAllConcurrently(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, Action(Of TRead), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Action{``1},System.Threading.CancellationToken)
    name: ReadAllConcurrently<TWrite, TRead>
    nameWithType: Extensions.ReadAllConcurrently<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrently<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Action{``1},System.Threading.CancellationToken)
    name: ReadAllConcurrently(Of TWrite, TRead)
    nameWithType: Extensions.ReadAllConcurrently(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrently(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Action{``1})
  commentId: M:Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Action{``1})
  isExternal: true
  name: ReadAllConcurrently<TWrite, TRead>(Channel<TWrite, TRead>, Int32, CancellationToken, Action<TRead>)
  nameWithType: Extensions.ReadAllConcurrently<TWrite, TRead>(Channel<TWrite, TRead>, Int32, CancellationToken, Action<TRead>)
  fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrently<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Int32, System.Threading.CancellationToken, System.Action<TRead>)
  nameWithType.vb: Extensions.ReadAllConcurrently(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, CancellationToken, Action(Of TRead))
  fullName.vb: Open.ChannelExtensions.Extensions.ReadAllConcurrently(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Int32, System.Threading.CancellationToken, System.Action(Of TRead))
  name.vb: ReadAllConcurrently(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, CancellationToken, Action(Of TRead))
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Action{``1})
    name: ReadAllConcurrently<TWrite, TRead>
    nameWithType: Extensions.ReadAllConcurrently<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrently<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Action{``1})
    name: ReadAllConcurrently(Of TWrite, TRead)
    nameWithType: Extensions.ReadAllConcurrently(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.ReadAllConcurrently(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<Func<TWrite>>, Boolean, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<Func<TWrite>>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Collections.Generic.IEnumerable<System.Func<TWrite>>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of Func(Of TWrite)), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Collections.Generic.IEnumerable(Of System.Func(Of TWrite)), System.Boolean, System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of Func(Of TWrite)), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Boolean,System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TRead>
    nameWithType: Extensions.SourceAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Boolean,System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TRead)
    nameWithType: Extensions.SourceAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
  isExternal: true
  name: SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<Func<TWrite>>, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<Func<TWrite>>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Collections.Generic.IEnumerable<System.Func<TWrite>>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of Func(Of TWrite)), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Collections.Generic.IEnumerable(Of System.Func(Of TWrite)), System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of Func(Of TWrite)), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TRead>
    nameWithType: Extensions.SourceAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TRead)
    nameWithType: Extensions.SourceAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<ValueTask<TWrite>>, Boolean, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<ValueTask<TWrite>>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Collections.Generic.IEnumerable<System.Threading.Tasks.ValueTask<TWrite>>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of ValueTask(Of TWrite)), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.ValueTask(Of TWrite)), System.Boolean, System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of ValueTask(Of TWrite)), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Boolean,System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TRead>
    nameWithType: Extensions.SourceAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Boolean,System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TRead)
    nameWithType: Extensions.SourceAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
  isExternal: true
  name: SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<ValueTask<TWrite>>, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<ValueTask<TWrite>>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Collections.Generic.IEnumerable<System.Threading.Tasks.ValueTask<TWrite>>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of ValueTask(Of TWrite)), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.ValueTask(Of TWrite)), System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of ValueTask(Of TWrite)), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TRead>
    nameWithType: Extensions.SourceAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TRead)
    nameWithType: Extensions.SourceAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<Task<TWrite>>, Boolean, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<Task<TWrite>>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TWrite>>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of Task(Of TWrite)), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TWrite)), System.Boolean, System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of Task(Of TWrite)), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TRead>
    nameWithType: Extensions.SourceAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TRead)
    nameWithType: Extensions.SourceAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  isExternal: true
  name: SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<Task<TWrite>>, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<Task<TWrite>>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TWrite>>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of Task(Of TWrite)), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TWrite)), System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of Task(Of TWrite)), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TRead>
    nameWithType: Extensions.SourceAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TRead)
    nameWithType: Extensions.SourceAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: Source<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<TWrite>, Boolean, CancellationToken)
  nameWithType: Extensions.Source<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<TWrite>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Collections.Generic.IEnumerable<TWrite>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.Source(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of TWrite), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.Source(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Collections.Generic.IEnumerable(Of TWrite), System.Boolean, System.Threading.CancellationToken)
  name.vb: Source(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of TWrite), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
    name: Source<TWrite, TRead>
    nameWithType: Extensions.Source<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
    name: Source(Of TWrite, TRead)
    nameWithType: Extensions.Source(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.Source(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
  isExternal: true
  name: Source<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<TWrite>, CancellationToken)
  nameWithType: Extensions.Source<TWrite, TRead>(Channel<TWrite, TRead>, IEnumerable<TWrite>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Collections.Generic.IEnumerable<TWrite>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.Source(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of TWrite), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.Source(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Collections.Generic.IEnumerable(Of TWrite), System.Threading.CancellationToken)
  name.vb: Source(Of TWrite, TRead)(Channel(Of TWrite, TRead), IEnumerable(Of TWrite), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
    name: Source<TWrite, TRead>
    nameWithType: Extensions.Source<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)
    name: Source(Of TWrite, TRead)
    nameWithType: Extensions.Source(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.Source(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
  isExternal: true
  name: SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, Int32, IEnumerable<Func<TWrite>>, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, Int32, IEnumerable<Func<TWrite>>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Int32, System.Collections.Generic.IEnumerable<System.Func<TWrite>>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, IEnumerable(Of Func(Of TWrite)), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Int32, System.Collections.Generic.IEnumerable(Of System.Func(Of TWrite)), System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, IEnumerable(Of Func(Of TWrite)), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TRead>
    nameWithType: Extensions.SourceAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TRead)
    nameWithType: Extensions.SourceAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
  isExternal: true
  name: SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, Int32, IEnumerable<ValueTask<TWrite>>, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, Int32, IEnumerable<ValueTask<TWrite>>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Int32, System.Collections.Generic.IEnumerable<System.Threading.Tasks.ValueTask<TWrite>>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, IEnumerable(Of ValueTask(Of TWrite)), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Int32, System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.ValueTask(Of TWrite)), System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, IEnumerable(Of ValueTask(Of TWrite)), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TRead>
    nameWithType: Extensions.SourceAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TRead)
    nameWithType: Extensions.SourceAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  isExternal: true
  name: SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, Int32, IEnumerable<Task<TWrite>>, CancellationToken)
  nameWithType: Extensions.SourceAsync<TWrite, TRead>(Channel<TWrite, TRead>, Int32, IEnumerable<Task<TWrite>>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Int32, System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TWrite>>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, IEnumerable(Of Task(Of TWrite)), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Int32, System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TWrite)), System.Threading.CancellationToken)
  name.vb: SourceAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Int32, IEnumerable(Of Task(Of TWrite)), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: SourceAsync<TWrite, TRead>
    nameWithType: Extensions.SourceAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.SourceAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: SourceAsync(Of TWrite, TRead)
    nameWithType: Extensions.SourceAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.SourceAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: Source<TWrite, TRead>(Channel<TWrite, TRead>, IAsyncEnumerable<TWrite>, Boolean, CancellationToken)
  nameWithType: Extensions.Source<TWrite, TRead>(Channel<TWrite, TRead>, IAsyncEnumerable<TWrite>, Boolean, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Collections.Generic.IAsyncEnumerable<TWrite>, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.Source(Of TWrite, TRead)(Channel(Of TWrite, TRead), IAsyncEnumerable(Of TWrite), Boolean, CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.Source(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Collections.Generic.IAsyncEnumerable(Of TWrite), System.Boolean, System.Threading.CancellationToken)
  name.vb: Source(Of TWrite, TRead)(Channel(Of TWrite, TRead), IAsyncEnumerable(Of TWrite), Boolean, CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
    name: Source<TWrite, TRead>
    nameWithType: Extensions.Source<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean,System.Threading.CancellationToken)
    name: Source(Of TWrite, TRead)
    nameWithType: Extensions.Source(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.Source(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)
  isExternal: true
  name: Source<TWrite, TRead>(Channel<TWrite, TRead>, IAsyncEnumerable<TWrite>, CancellationToken)
  nameWithType: Extensions.Source<TWrite, TRead>(Channel<TWrite, TRead>, IAsyncEnumerable<TWrite>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Collections.Generic.IAsyncEnumerable<TWrite>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.Source(Of TWrite, TRead)(Channel(Of TWrite, TRead), IAsyncEnumerable(Of TWrite), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.Source(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Collections.Generic.IAsyncEnumerable(Of TWrite), System.Threading.CancellationToken)
  name.vb: Source(Of TWrite, TRead)(Channel(Of TWrite, TRead), IAsyncEnumerable(Of TWrite), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)
    name: Source<TWrite, TRead>
    nameWithType: Extensions.Source<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.Source<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)
    name: Source(Of TWrite, TRead)
    nameWithType: Extensions.Source(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.Source(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.Transform``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2})
  commentId: M:Open.ChannelExtensions.Extensions.Transform``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2})
  isExternal: true
  name: Transform<TWrite, TRead, TResult>(Channel<TWrite, TRead>, Func<TRead, TResult>)
  nameWithType: Extensions.Transform<TWrite, TRead, TResult>(Channel<TWrite, TRead>, Func<TRead, TResult>)
  fullName: Open.ChannelExtensions.Extensions.Transform<TWrite, TRead, TResult>(System.Threading.Channels.Channel<TWrite, TRead>, System.Func<TRead, TResult>)
  nameWithType.vb: Extensions.Transform(Of TWrite, TRead, TResult)(Channel(Of TWrite, TRead), Func(Of TRead, TResult))
  fullName.vb: Open.ChannelExtensions.Extensions.Transform(Of TWrite, TRead, TResult)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Func(Of TRead, TResult))
  name.vb: Transform(Of TWrite, TRead, TResult)(Channel(Of TWrite, TRead), Func(Of TRead, TResult))
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.Transform``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2})
    name: Transform<TWrite, TRead, TResult>
    nameWithType: Extensions.Transform<TWrite, TRead, TResult>
    fullName: Open.ChannelExtensions.Extensions.Transform<TWrite, TRead, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.Transform``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2})
    name: Transform(Of TWrite, TRead, TResult)
    nameWithType: Extensions.Transform(Of TWrite, TRead, TResult)
    fullName: Open.ChannelExtensions.Extensions.Transform(Of TWrite, TRead, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.CompleteAsync``2(System.Threading.Channels.Channel{``0,``1},System.Exception)
  commentId: M:Open.ChannelExtensions.Extensions.CompleteAsync``2(System.Threading.Channels.Channel{``0,``1},System.Exception)
  isExternal: true
  name: CompleteAsync<TWrite, TRead>(Channel<TWrite, TRead>, Exception)
  nameWithType: Extensions.CompleteAsync<TWrite, TRead>(Channel<TWrite, TRead>, Exception)
  fullName: Open.ChannelExtensions.Extensions.CompleteAsync<TWrite, TRead>(System.Threading.Channels.Channel<TWrite, TRead>, System.Exception)
  nameWithType.vb: Extensions.CompleteAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Exception)
  fullName.vb: Open.ChannelExtensions.Extensions.CompleteAsync(Of TWrite, TRead)(System.Threading.Channels.Channel(Of TWrite, TRead), System.Exception)
  name.vb: CompleteAsync(Of TWrite, TRead)(Channel(Of TWrite, TRead), Exception)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.CompleteAsync``2(System.Threading.Channels.Channel{``0,``1},System.Exception)
    name: CompleteAsync<TWrite, TRead>
    nameWithType: Extensions.CompleteAsync<TWrite, TRead>
    fullName: Open.ChannelExtensions.Extensions.CompleteAsync<TWrite, TRead>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.CompleteAsync``2(System.Threading.Channels.Channel{``0,``1},System.Exception)
    name: CompleteAsync(Of TWrite, TRead)
    nameWithType: Extensions.CompleteAsync(Of TWrite, TRead)
    fullName: Open.ChannelExtensions.Extensions.CompleteAsync(Of TWrite, TRead)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.Extensions.AsAsyncEnumerable``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken)
  commentId: M:Open.ChannelExtensions.Extensions.AsAsyncEnumerable``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken)
  isExternal: true
  name: AsAsyncEnumerable<TIn, TOut>(Channel<TIn, TOut>, CancellationToken)
  nameWithType: Extensions.AsAsyncEnumerable<TIn, TOut>(Channel<TIn, TOut>, CancellationToken)
  fullName: Open.ChannelExtensions.Extensions.AsAsyncEnumerable<TIn, TOut>(System.Threading.Channels.Channel<TIn, TOut>, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.AsAsyncEnumerable(Of TIn, TOut)(Channel(Of TIn, TOut), CancellationToken)
  fullName.vb: Open.ChannelExtensions.Extensions.AsAsyncEnumerable(Of TIn, TOut)(System.Threading.Channels.Channel(Of TIn, TOut), System.Threading.CancellationToken)
  name.vb: AsAsyncEnumerable(Of TIn, TOut)(Channel(Of TIn, TOut), CancellationToken)
  spec.csharp:
  - uid: Open.ChannelExtensions.Extensions.AsAsyncEnumerable``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken)
    name: AsAsyncEnumerable<TIn, TOut>
    nameWithType: Extensions.AsAsyncEnumerable<TIn, TOut>
    fullName: Open.ChannelExtensions.Extensions.AsAsyncEnumerable<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Open.ChannelExtensions.Extensions.AsAsyncEnumerable``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken)
    name: AsAsyncEnumerable(Of TIn, TOut)
    nameWithType: Extensions.AsAsyncEnumerable(Of TIn, TOut)
    fullName: Open.ChannelExtensions.Extensions.AsAsyncEnumerable(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Open.ChannelExtensions.TransformChannel`3.#ctor*
  commentId: Overload:Open.ChannelExtensions.TransformChannel`3.#ctor
  name: TransformChannel
  nameWithType: TransformChannel<TWrite, TRead, TResult>.TransformChannel
  fullName: Open.ChannelExtensions.TransformChannel<TWrite, TRead, TResult>.TransformChannel
  nameWithType.vb: TransformChannel(Of TWrite, TRead, TResult).TransformChannel
  fullName.vb: Open.ChannelExtensions.TransformChannel(Of TWrite, TRead, TResult).TransformChannel
- uid: System.Threading.Channels.Channel{{TWrite},{TRead}}
  commentId: T:System.Threading.Channels.Channel{``0,``1}
  parent: System.Threading.Channels
  definition: System.Threading.Channels.Channel`2
  name: Channel<TWrite, TRead>
  nameWithType: Channel<TWrite, TRead>
  fullName: System.Threading.Channels.Channel<TWrite, TRead>
  nameWithType.vb: Channel(Of TWrite, TRead)
  fullName.vb: System.Threading.Channels.Channel(Of TWrite, TRead)
  name.vb: Channel(Of TWrite, TRead)
  spec.csharp:
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Channels.Channel`2
    name: Channel
    nameWithType: Channel
    fullName: System.Threading.Channels.Channel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrite
    nameWithType: TWrite
    fullName: TWrite
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TRead},{TResult}}
  commentId: T:System.Func{``1,``2}
  parent: System
  definition: System.Func`2
  name: Func<TRead, TResult>
  nameWithType: Func<TRead, TResult>
  fullName: System.Func<TRead, TResult>
  nameWithType.vb: Func(Of TRead, TResult)
  fullName.vb: System.Func(Of TRead, TResult)
  name.vb: Func(Of TRead, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRead
    nameWithType: TRead
    fullName: TRead
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
