<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Open.ChannelExtensions</name>
    </assembly>
    <members>
        <member name="T:Open.ChannelExtensions.BatchingChannelReader`1">
            <summary>
            A ChannelReader that batches results.
            Use the .Batch extension instead of constructing this directly.
            </summary>
        </member>
        <member name="M:Open.ChannelExtensions.BatchingChannelReader`1.#ctor(System.Threading.Channels.ChannelReader{`0},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructs a BatchingChannelReader.
            Use the .Batch extension instead of constructing this directly.
            </summary>
        </member>
        <member name="M:Open.ChannelExtensions.BatchingChannelReader`1.ForceBatch">
            <summary>
            If no full batch is waiting, will force buffering any batch that has at least one item.
            Returns true if anything was added to the buffer.
            </summary>
        </member>
        <member name="M:Open.ChannelExtensions.BatchingChannelReader`1.WithTimeout(System.Int64)">
            <summary>
            Specifies a timeout by which a batch will be emmited there is at least one item but has been waiting
            for longer than the timeout value.
            </summary>
            <param name="millisecondsTimeout">
            The timeout value where after a batch is forced.<br/>
            A value of zero or less cancels/clears any timeout.
            </param>
            <returns>The current reader.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.BatchingChannelReader`1.RefreshTimeout">
            <summary>
            If one exists, updates the timer's timeout value.
            </summary>
        </member>
        <member name="M:Open.ChannelExtensions.BatchingChannelReader`1.WithTimeout(System.TimeSpan)">
            <param name="timeout">
            The timeout value where after a batch is forced.<br/>
            A value of zero or less cancels/clears any timeout.<br/>
            Note: Values are converted to milliseconds.
            </param>
            <inheritdoc cref="M:Open.ChannelExtensions.BatchingChannelReader`1.WithTimeout(System.Int64)"/>
        </member>
        <member name="M:Open.ChannelExtensions.BatchingChannelReader`1.OnBeforeFinalFlush">
            <inheritdoc />
        </member>
        <member name="M:Open.ChannelExtensions.BatchingChannelReader`1.TryPipeItems(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Open.ChannelExtensions.BatchingChannelReader`1.WaitToReadAsyncCore(System.Threading.Tasks.ValueTask{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Open.ChannelExtensions.BufferingChannelReader`2">
            <summary>
            Base class for buffering results of a source ChannelReader.
            </summary>
            <typeparam name="TIn">The input type of the buffer.</typeparam>
            <typeparam name="TOut">The output type of the buffer.</typeparam>
        </member>
        <member name="P:Open.ChannelExtensions.BufferingChannelReader`2.Source">
            <summary>
            The source of the buffer.
            </summary>
        </member>
        <member name="P:Open.ChannelExtensions.BufferingChannelReader`2.Buffer">
            <summary>
            The internal channel used for buffering.
            </summary>
        </member>
        <member name="M:Open.ChannelExtensions.BufferingChannelReader`2.#ctor(System.Threading.Channels.ChannelReader{`0},System.Boolean,System.Boolean)">
            <summary>
            Base constructor for a BufferingChannelReader.
            </summary>
        </member>
        <member name="M:Open.ChannelExtensions.BufferingChannelReader`2.OnBeforeFinalFlush">
            <summary>
            Called before the last items are flushed to the buffer.
            </summary>
        </member>
        <member name="P:Open.ChannelExtensions.BufferingChannelReader`2.Completion">
            <inheritdoc />
        </member>
        <member name="M:Open.ChannelExtensions.BufferingChannelReader`2.TryPipeItems(System.Boolean)">
            <summary>
            The method that triggers adding entries to the buffer.
            </summary>
            <param name="flush">Signals that all items should be piped.</param>
            <returns>True if items were transferred.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.BufferingChannelReader`2.TryRead(`1@)">
            <inheritdoc />
        </member>
        <member name="M:Open.ChannelExtensions.BufferingChannelReader`2.WaitToReadAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Open.ChannelExtensions.BufferingChannelReader`2.WaitToReadAsyncCore(System.Threading.Tasks.ValueTask{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Implementation for waiting.
            Can be overridden.
            </summary>
        </member>
        <member name="T:Open.ChannelExtensions.Extensions">
            <summary>
            Extensions for operating with System.Threading.Channels.
            </summary>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Batch``1(System.Threading.Channels.ChannelReader{``0},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Batches results into the batch size provided with a max capacity of batches.
            </summary>
            <typeparam name="T">The output type of the source channel.</typeparam>
            <param name="source">The channel to read from.</param>
            <param name="batchSize">
            The maximum size of each batch.
            Note: setting this value sets the capacity of each batch (reserves memory).
            </param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="allowSynchronousContinuations">True can reduce the amount of scheduling and markedly improve performance, but may produce unexpected or even undesirable behavior.</param>
            <returns>A channel reader containing the batches.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Filter``1(System.Threading.Channels.ChannelReader{``0},System.Func{``0,System.Boolean})">
            <summary>
            Produces a reader that only contains results that pass the predicate condition.  Ones that fail the predicate are discarded.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="source">The source channel reader.</param>
            <param name="predicate">The predicate function.</param>
            <returns>A channel reader representing the filtered results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Join``1(System.Threading.Channels.ChannelReader{System.Collections.Generic.IEnumerable{``0}},System.Boolean)">
            <summary>
            Joins collections of the same type into a single channel reader in the order provided.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="source">The source reader.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <returns>A channel reader containing the joined results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Join``1(System.Threading.Channels.ChannelReader{System.Collections.Generic.ICollection{``0}},System.Boolean)">
            <summary>
            Joins collections of the same type into a single channel reader in the order provided.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="source">The source reader.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <returns>A channel reader containing the joined results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Join``1(System.Threading.Channels.ChannelReader{System.Collections.Generic.IList{``0}},System.Boolean)">
            <summary>
            Joins collections of the same type into a single channel reader in the order provided.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="source">The source reader.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <returns>A channel reader containing the joined results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Join``1(System.Threading.Channels.ChannelReader{System.Collections.Generic.List{``0}},System.Boolean)">
            <summary>
            Joins collections of the same type into a single channel reader in the order provided.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="source">The source reader.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <returns>A channel reader containing the joined results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Join``1(System.Threading.Channels.ChannelReader{``0[]},System.Boolean)">
            <summary>
            Joins collections of the same type into a single channel reader in the order provided.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="source">The source reader.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <returns>A channel reader containing the joined results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.PipeTo``1(System.Threading.Channels.ChannelReader{``0},System.Threading.Channels.ChannelWriter{``0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads all entries from the source channel and writes them to the target.
            This is useful for managing different buffers sizes, especially if the source reader comes from a .Transform function.
            </summary>
            <typeparam name="T">The type contained by the source channel and written to the target..</typeparam>
            <param name="source">The source channel.</param>
            <param name="target">The target channel.</param>
            <param name="complete">Indicates to call complete on the target when the source is complete.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.PipeTo``1(System.Threading.Channels.ChannelReader{``0},System.Threading.Channels.Channel{``0},System.Threading.CancellationToken)">
            <summary>
            Reads all entries from the source channel and writes them to the target.  Will call complete when finished and propagates any errors to the channel.
            This is useful for managing different buffers sizes, especially if the source reader comes from a .Transform function.
            </summary>
            <typeparam name="T">The type contained by the source channel and written to the target..</typeparam>
            <param name="source">The source channel.</param>
            <param name="target">The target channel.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader of the target.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.PipeAsync``2(System.Threading.Channels.ChannelReader{``0},System.Int32,System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads all entries concurrently and applies the values to the provided transform function before buffering the results into another channel for consumption.
            </summary>
            <typeparam name="TIn">The type contained by the source channel.</typeparam>
            <typeparam name="TOut">The outgoing type from the resultant channel.</typeparam>
            <param name="source">The source channel.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="transform">The transform function to apply the source entries before passing on to the output.</param>
            <param name="capacity">The width of the pipe: how many entries to buffer while waiting to be read from.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the output.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads all entries and applies the values to the provided transform function before buffering the results into another channel for consumption.
            </summary>
            <typeparam name="TWrite">The type being accepted by the channel.</typeparam>
            <typeparam name="TRead">The type contained by the source channel.</typeparam>
            <typeparam name="TOut">The outgoing type from the resultant channel.</typeparam>
            <param name="source">The source channel.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="transform">The transform function to apply the source entries before passing on to the output.</param>
            <param name="capacity">The width of the pipe: how many entries to buffer while waiting to be read from.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the output.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskPipeAsync``2(System.Threading.Channels.ChannelReader{``0},System.Int32,System.Func{``0,System.Threading.Tasks.Task{``1}},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads all entries and applies the values to the provided transform function before buffering the results into another channel for consumption.
            </summary>
            <typeparam name="TIn">The type contained by the source channel.</typeparam>
            <typeparam name="TOut">The outgoing type from the resultant channel.</typeparam>
            <param name="source">The source channel.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="transform">The transform function to apply the source entries before passing on to the output.</param>
            <param name="capacity">The width of the pipe: how many entries to buffer while waiting to be read from.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the output.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads all entries and applies the values to the provided transform function before buffering the results into another channel for consumption.
            </summary>
            <typeparam name="TWrite">The type being accepted by the channel.</typeparam>
            <typeparam name="TRead">The type contained by the source channel.</typeparam>
            <typeparam name="TOut">The outgoing type from the resultant channel.</typeparam>
            <param name="source">The source channel.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="transform">The transform function to apply the source entries before passing on to the output.</param>
            <param name="capacity">The width of the pipe: how many entries to buffer while waiting to be read from.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the output.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Pipe``2(System.Threading.Channels.ChannelReader{``0},System.Int32,System.Func{``0,``1},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads all entries and applies the values to the provided transform function before buffering the results into another channel for consumption.
            </summary>
            <typeparam name="TIn">The type contained by the source channel.</typeparam>
            <typeparam name="TOut">The outgoing type from the resultant channel.</typeparam>
            <param name="source">The source channel.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="transform">The transform function to apply the source entries before passing on to the output.</param>
            <param name="capacity">The width of the pipe: how many entries to buffer while waiting to be read from.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the output.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads all entries and applies the values to the provided transform function before buffering the results into another channel for consumption.
            </summary>
            <typeparam name="TWrite">The type being accepted by the channel.</typeparam>
            <typeparam name="TRead">The type contained by the source channel.</typeparam>
            <typeparam name="TOut">The outgoing type from the resultant channel.</typeparam>
            <param name="source">The source channel.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="transform">The transform function to apply the source entries before passing on to the output.</param>
            <param name="capacity">The width of the pipe: how many entries to buffer while waiting to be read from.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the output.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.PipeAsync``2(System.Threading.Channels.ChannelReader{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads all entries and applies the values to the provided transform function before buffering the results into another channel for consumption.
            </summary>
            <typeparam name="TIn">The type contained by the source channel.</typeparam>
            <typeparam name="TOut">The outgoing type from the resultant channel.</typeparam>
            <param name="source">The source channel.</param>
            <param name="transform">The transform function to apply the source entries before passing on to the output.</param>
            <param name="capacity">The width of the pipe: how many entries to buffer while waiting to be read from.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the output.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.PipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads all entries and applies the values to the provided transform function before buffering the results into another channel for consumption.
            </summary>
            <typeparam name="TWrite">The type being accepted by the channel.</typeparam>
            <typeparam name="TRead">The type contained by the source channel.</typeparam>
            <typeparam name="TOut">The outgoing type from the resultant channel.</typeparam>
            <param name="source">The source channel.</param>
            <param name="transform">The transform function to apply the source entries before passing on to the output.</param>
            <param name="capacity">The width of the pipe: how many entries to buffer while waiting to be read from.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the output.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskPipeAsync``2(System.Threading.Channels.ChannelReader{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads all entries and applies the values to the provided transform function before buffering the results into another channel for consumption.
            </summary>
            <typeparam name="TIn">The type contained by the source channel.</typeparam>
            <typeparam name="TOut">The outgoing type from the resultant channel.</typeparam>
            <param name="source">The source channel.</param>
            <param name="transform">The transform function to apply the source entries before passing on to the output.</param>
            <param name="capacity">The width of the pipe: how many entries to buffer while waiting to be read from.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the output.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskPipeAsync``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads all entries and applies the values to the provided transform function before buffering the results into another channel for consumption.
            </summary>
            <typeparam name="TWrite">The type being accepted by the channel.</typeparam>
            <typeparam name="TRead">The type contained by the source channel.</typeparam>
            <typeparam name="TOut">The outgoing type from the resultant channel.</typeparam>
            <param name="source">The source channel.</param>
            <param name="transform">The transform function to apply the source entries before passing on to the output.</param>
            <param name="capacity">The width of the pipe: how many entries to buffer while waiting to be read from.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the output.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Pipe``2(System.Threading.Channels.ChannelReader{``0},System.Func{``0,``1},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads all entries and applies the values to the provided transform function before buffering the results into another channel for consumption.
            </summary>
            <typeparam name="TIn">The type contained by the source channel.</typeparam>
            <typeparam name="TOut">The outgoing type from the resultant channel.</typeparam>
            <param name="source">The source channel.</param>
            <param name="transform">The transform function to apply the source entries before passing on to the output.</param>
            <param name="capacity">The width of the pipe: how many entries to buffer while waiting to be read from.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the output.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Pipe``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads all entries and applies the values to the provided transform function before buffering the results into another channel for consumption.
            </summary>
            <typeparam name="TWrite">The type being accepted by the channel.</typeparam>
            <typeparam name="TRead">The type contained by the source channel.</typeparam>
            <typeparam name="TOut">The outgoing type from the resultant channel.</typeparam>
            <param name="source">The source channel.</param>
            <param name="transform">The transform function to apply the source entries before passing on to the output.</param>
            <param name="capacity">The width of the pipe: how many entries to buffer while waiting to be read from.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the output.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAvailable``1(System.Threading.Channels.ChannelReader{``0})">
            <summary>
            Creates an enumerable that will read from the channel until no more are available for read.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <returns>An enumerable that will read from the channel until no more are available for read</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadBatchAsync``1(System.Threading.Channels.ChannelReader{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads from the channel up to the max count.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="max">The max size of the batch.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The batch requested.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``1(System.Threading.Channels.ChannelReader{``0},System.Threading.CancellationToken,System.Func{``0,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``1(System.Threading.Channels.ChannelReader{``0},System.Threading.CancellationToken,System.Func{``0,System.Threading.Tasks.ValueTask},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadUntilCancelledAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadUntilCancelled``1(System.Threading.Channels.ChannelReader{``0},System.Threading.CancellationToken,System.Action{``0,System.Int64},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadUntilCancelled``1(System.Threading.Channels.ChannelReader{``0},System.Threading.CancellationToken,System.Action{``0},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadUntilCancelled``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The receiver function.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsync``1(System.Threading.Channels.ChannelReader{``0},System.Func{``0,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsync``1(System.Threading.Channels.ChannelReader{``0},System.Func{``0,System.Int64,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsync``1(System.Threading.Channels.ChannelReader{``0},System.Threading.CancellationToken,System.Func{``0,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.ValueTask},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Int64,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsync``1(System.Threading.Channels.ChannelReader{``0},System.Func{``0,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsync``1(System.Threading.Channels.ChannelReader{``0},System.Func{``0,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsync``1(System.Threading.Channels.ChannelReader{``0},System.Threading.CancellationToken,System.Func{``0,System.Threading.Tasks.ValueTask},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``1(System.Threading.Channels.ChannelReader{``0},System.Func{``0,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``1(System.Threading.Channels.ChannelReader{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``1(System.Threading.Channels.ChannelReader{``0},System.Threading.CancellationToken,System.Func{``0,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsync``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAll``1(System.Threading.Channels.ChannelReader{``0},System.Action{``0,System.Int64},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="receiver">The receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writreadinging.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAll``1(System.Threading.Channels.ChannelReader{``0},System.Action{``0,System.Int64},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="receiver">The receiver function.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writreadinging.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAll``1(System.Threading.Channels.ChannelReader{``0},System.Threading.CancellationToken,System.Action{``0,System.Int64},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writreadinging.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1,System.Int64},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The receiver function.</param>
            <param name="cancellationToken">The optional cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1,System.Int64},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="cancellationToken">The optional cancellation token.</param>
            <param name="receiver">The receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAll``1(System.Threading.Channels.ChannelReader{``0},System.Action{``0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="receiver">The receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAll``1(System.Threading.Channels.ChannelReader{``0},System.Action{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="receiver">The receiver function.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAll``1(System.Threading.Channels.ChannelReader{``0},System.Threading.CancellationToken,System.Action{``0},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="receiver">The receiver function.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Action{``1},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The receiver function.</param>
            <param name="cancellationToken">The optional cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAll``2(System.Threading.Channels.Channel{``0,``1},System.Threading.CancellationToken,System.Action{``1},System.Boolean)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="cancellationToken">The optional cancellation token.</param>
            <param name="receiver">The receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsLines(System.Threading.Channels.ChannelReader{System.String},System.IO.TextWriter,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and writes to the target writer.
            </summary>
            <param name="reader">The channel reader to read from.</param>
            <param name="receiver">The receiver function.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsLines(System.Threading.Channels.ChannelReader{System.String},System.IO.TextWriter,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and writes to the target writer.
            </summary>
            <param name="reader">The channel reader to read from.</param>
            <param name="receiver">The receiver function.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsLines``1(System.Threading.Channels.Channel{``0,System.String},System.IO.TextWriter,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and writes to the target writer.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The TextWriter to recieve the lines.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllAsLines``1(System.Threading.Channels.Channel{``0,System.String},System.IO.TextWriter,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Reads items from the channel and writes to the target writer.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="receiver">The TextWriter to recieve the lines.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before reading.</param>
            <returns>The count of items read after the reader has completed.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ToListAsync``1(System.Threading.Channels.ChannelReader{``0})">
            <summary>
            Adds all items in the reader to a list and returns when the channel completes.
            Note: this should only be used when the results of the channel are guaranteed to be limited.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <returns>A list containing all the items from the completed channel.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``1(System.Threading.Channels.ChannelReader{``0},System.Int32,System.Func{``0,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task that completes when no more reading is to be done.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``1(System.Threading.Channels.ChannelReader{``0},System.Int32,System.Threading.CancellationToken,System.Func{``0,System.Threading.Tasks.ValueTask})">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The async receiver function.</param>
            <returns>A task that completes when no more reading is to be done.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync``1(System.Threading.Channels.ChannelReader{``0},System.Int32,System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task that completes when no more reading is to be done.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.ValueTask},System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task that completes when no more reading is to be done.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Func{``1,System.Threading.Tasks.ValueTask})">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The async receiver function.</param>
            <returns>A task that completes when no more reading is to be done.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.TaskReadAllConcurrentlyAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Func{``1,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="receiver">The async receiver function.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task that completes when no more reading is to be done.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllConcurrently``1(System.Threading.Channels.ChannelReader{``0},System.Int32,System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="receiver">The receiver function.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task that completes when no more reading is to be done.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllConcurrently``1(System.Threading.Channels.ChannelReader{``0},System.Int32,System.Threading.CancellationToken,System.Action{``0})">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="reader">The channel reader to read from.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The receiver function.</param>
            <returns>A task that completes when no more reading is to be done.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Action{``1},System.Threading.CancellationToken)">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="receiver">The receiver function.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task that completes when no more reading is to be done.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ReadAllConcurrently``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Threading.CancellationToken,System.Action{``1})">
            <summary>
            Reads items from the channel and passes them to the receiver.
            </summary>
            <typeparam name="TWrite">The item type of the writer.</typeparam>
            <typeparam name="TRead">The item type of the reader.</typeparam>
            <param name="channel">The channel to read from.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="receiver">The receiver function.</param>
            <returns>A task that completes when no more reading is to be done.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Executes all entries from the source and passes their result to the channel.  Calls complete when finished.
            </summary>
            <typeparam name="TWrite">The input type of the channel.</typeparam>
            <typeparam name="TRead">The output type of the channel.</typeparam>
            <param name="target">The channel to write to.</param>
            <param name="source">The asynchronous source data to use.</param>
            <param name="completion">The underlying ValueTask used to pass the data from the source to the channel.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writing to the channel.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Awaits all entries from the source and passes their result to the channel.  Calls complete when finished.
            </summary>
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Writes all entries from the source to the channel.  Calls complete when finished.
            </summary>
            <param name="target">The channel to write to.</param>
            <param name="source">The source data to use.</param>
            <param name="completion">The underlying ValueTask used to pass the data from the source to the channel.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writing to the channel.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)">
            <param name="target">The channel to write to.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="source">The asynchronous source data to use.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)">
            <summary>
            Awaits all entries from the source and passes their result to the channel.  Calls complete when finished.
            </summary>
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.SourceAsync``2(System.Threading.Channels.Channel{``0,``1},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Source``1(System.Threading.Channels.Channel{System.String,``0},System.IO.TextReader,System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)">
            <typeparam name="T">The output type of the channel.</typeparam>
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.Source``2(System.Threading.Channels.Channel{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Source``1(System.Threading.Channels.Channel{System.String,``0},System.IO.TextReader,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.Source``1(System.Threading.Channels.Channel{System.String,``0},System.IO.TextReader,System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Source``1(System.Threading.Channels.Channel{System.String,``0},System.IO.TextReader,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Open.ChannelExtensions.Extensions.Source``1(System.Threading.Channels.Channel{System.String,``0},System.IO.TextReader,System.Threading.Tasks.ValueTask{System.Int64}@,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Transform``2(System.Threading.Channels.ChannelReader{``0},System.Func{``0,``1})">
            <summary>
            Transforms the 
            </summary>
            <typeparam name="T">The output type of the provided source reader and input type of the transform.</typeparam>
            <typeparam name="TResult">The output type of the transform.</typeparam>
            <param name="source">The source channel reader.</param>
            <param name="transform">The transform function.</param>
            <returns>A channel reader representing the tranformed results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Transform``3(System.Threading.Channels.Channel{``0,``1},System.Func{``1,``2})">
            <summary>
            Transforms the 
            </summary>
            <typeparam name="TWrite">Specifies the type of data that may be written to the channel.</typeparam>
            <typeparam name="TRead">Specifies the type of data read from the source channel.</typeparam>
            <typeparam name="TResult">Specifies the type of data that may be read from the channel.</typeparam>
            <param name="source">The source channel reader.</param>
            <param name="transform">The transform function.</param>
            <returns>A channel reader representing the tranformed results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.Transform``2(System.Threading.Channels.Channel{``0},System.Func{``0,``1})">
            <summary>
            Transforms the 
            </summary>
            <typeparam name="T">Specifies the type of data that may be written to the channel.</typeparam>
            <typeparam name="TResult">Specifies the type of data that may be read from the channel.</typeparam>
            <param name="source">The source channel reader.</param>
            <param name="transform">The transform function.</param>
            <returns>A channel reader representing the tranformed results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.OfType``2(System.Threading.Channels.ChannelReader{``0})">
            <summary>
            Produces a reader that only contains results of a specific type.  Others are discarded.
            </summary>
            <typeparam name="TSource">The source item type.</typeparam>
            <typeparam name="T">The desired item type.</typeparam>
            <param name="source">The source channel reader.</param>
            <returns>A channel reader representing the filtered results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WriteAllAsync``1(System.Threading.Channels.ChannelWriter{``0},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes all entries from the source to the channel.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="target">The channel to write to.</param>
            <param name="source">The asynchronous source data to use.</param>
            <param name="complete">If true, will call .Complete() if all the results have successfully been written (or the source is emtpy).</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writing.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task containing the count of items written that completes when all the data has been written to the channel writer.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WriteAllAsync``1(System.Threading.Channels.ChannelWriter{``0},System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes all entries from the source to the channel.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="target">The channel to write to.</param>
            <param name="source">The asynchronous source data to use.</param>
            <param name="complete">If true, will call .Complete() if all the results have successfully been written (or the source is emtpy).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task containing the count of items written that completes when all the data has been written to the channel writer.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WriteAllAsync``1(System.Threading.Channels.ChannelWriter{``0},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes all entries from the source to the channel.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="target">The channel to write to.</param>
            <param name="source">The asynchronous source data to use.</param>
            <param name="complete">If true, will call .Complete() if all the results have successfully been written (or the source is emtpy).</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writing.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task containing the count of items written that completes when all the data has been written to the channel writer.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WriteAllAsync``1(System.Threading.Channels.ChannelWriter{``0},System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes all entries from the source to the channel.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="target">The channel to write to.</param>
            <param name="source">The asynchronous source data to use.</param>
            <param name="complete">If true, will call .Complete() if all the results have successfully been written (or the source is emtpy).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task containing the count of items written that completes when all the data has been written to the channel writer.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WriteAllAsync``1(System.Threading.Channels.ChannelWriter{``0},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes all entries and writes their results to the channel.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="target">The channel to write to.</param>
            <param name="source">The asynchronous source data to use.</param>
            <param name="complete">If true, will call .Complete() if all the results have successfully been written (or the source is emtpy).</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writing.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task containing the count of items written that completes when all the data has been written to the channel writer.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WriteAllAsync``1(System.Threading.Channels.ChannelWriter{``0},System.Collections.Generic.IEnumerable{System.Func{``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes all entries and writes their results to the channel.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="target">The channel to write to.</param>
            <param name="source">The asynchronous source data to use.</param>
            <param name="complete">If true, will call .Complete() if all the results have successfully been written (or the source is emtpy).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task containing the count of items written that completes when all the data has been written to the channel writer.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WriteAll``1(System.Threading.Channels.ChannelWriter{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes all entries from the source to the channel.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="target">The channel to write to.</param>
            <param name="source">The source data to use.</param>
            <param name="complete">If true, will call .Complete() if all the results have successfully been written (or the source is emtpy).</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writing.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task containing the count of items written that completes when all the data has been written to the channel writer.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WriteAll``1(System.Threading.Channels.ChannelWriter{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes all entries from the source to the channel.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="target">The channel to write to.</param>
            <param name="source">The source data to use.</param>
            <param name="complete">If true, will call .Complete() if all the results have successfully been written (or the source is emtpy).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task containing the count of items written that completes when all the data has been written to the channel writer.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WriteAllLines(System.Threading.Channels.ChannelWriter{System.String},System.IO.TextReader,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Consumes all lines from a TextReader and writes them to a channel.
            </summary>
            <param name="source">The text reader to consume from.</param>
            <param name="target">The channel to write to.</param>
            <param name="complete">If true, will call .Complete() if all the results have successfully been written (or the source is emtpy).</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writing.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task containing the count of items written that completes when all the data has been written to the channel writer.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WriteAllLines(System.Threading.Channels.ChannelWriter{System.String},System.IO.TextReader,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Consumes all lines from a TextReader and writes them to a channel.
            </summary>
            <param name="source">The text reader to consume from.</param>
            <param name="target">The channel to write to.</param>
            <param name="complete">If true, will call .Complete() if all the results have successfully been written (or the source is emtpy).</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task containing the count of items written that completes when all the data has been written to the channel writer.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WriteAllConcurrentlyAsync``1(System.Threading.Channels.ChannelWriter{``0},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes all entries from the source to the channel.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="target">The channel to write to.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="source">The asynchronous source data to use.</param>
            <param name="complete">If true, will call .Complete() if all the results have successfully been written (or the source is emtpy).</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task containing the count of items written that completes when all the data has been written to the channel writer.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WriteAllConcurrentlyAsync``1(System.Threading.Channels.ChannelWriter{``0},System.Int32,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes all entries from the source to the channel.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="target">The channel to write to.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="source">The asynchronous source data to use.</param>
            <param name="complete">If true, will call .Complete() if all the results have successfully been written (or the source is emtpy).</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task containing the count of items written that completes when all the data has been written to the channel writer.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WriteAllConcurrentlyAsync``1(System.Threading.Channels.ChannelWriter{``0},System.Int32,System.Collections.Generic.IEnumerable{System.Func{``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes all entries and writes their results to the channel.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="target">The channel to write to.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="source">The asynchronous source data to use.</param>
            <param name="complete">If true, will call .Complete() if all the results have successfully been written (or the source is emtpy).</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task containing the count of items written that completes when all the data has been written to the channel writer.
            The count should be ignored if the number of iterations could exceed the max value of long.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WaitToWriteAndThrowIfClosedAsync``1(System.Threading.Channels.ChannelWriter{``0},System.String,System.Threading.CancellationToken)">
            <summary>
            Waits for opportunity to write to a channel and throws a ChannelClosedException if the channel is closed.  
            </summary>
            <typeparam name="T">The type being written to the channel</typeparam>
            <param name="writer">The channel writer.</param>
            <param name="ifClosedMessage">The message to include with the ChannelClosedException if thrown.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WaitToWriteAndThrowIfClosedAsync``1(System.Threading.Channels.ChannelWriter{``0},System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Waits for opportunity to write to a channel and throws a ChannelClosedException if the channel is closed.  
            </summary>
            <typeparam name="T">The type being written to the channel</typeparam>
            <param name="writer">The channel writer.</param>
            <param name="ifClosedMessage">The message to include with the ChannelClosedException if thrown.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before continuing.</param>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WaitToWriteAndThrowIfClosedAsync``1(System.Threading.Channels.ChannelWriter{``0},System.Threading.CancellationToken)">
            <summary>
            Waits for opportunity to write to a channel and throws a ChannelClosedException if the channel is closed.  
            </summary>
            <typeparam name="T">The type being written to the channel</typeparam>
            <param name="writer">The channel writer.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.WaitToWriteAndThrowIfClosedAsync``1(System.Threading.Channels.ChannelWriter{``0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Waits for opportunity to write to a channel and throws a ChannelClosedException if the channel is closed.  
            </summary>
            <typeparam name="T">The type being written to the channel</typeparam>
            <param name="writer">The channel writer.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before continuing.</param>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.CompleteAsync``2(System.Threading.Channels.Channel{``0,``1},System.Exception)">
            <summary>
            Calls complete on the writer and returns the completion from the reader.
            </summary>
            <typeparam name="TWrite">The type being received by the writer.</typeparam>
            <typeparam name="TRead">The type being read from the reader.</typeparam>
            <param name="channel">The channel to complete asynchronously.</param>
            <param name="exception">The optional exception to include with completion.</param>
            <returns>The reader's completion task.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ToChannel(System.IO.TextReader,System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Writes all lines from the source to a channel and calls complete when finished.
            </summary>
            <param name="source">The source data to use.</param>
            <param name="capacity">The optional bounded capacity of the channel. Default is unbound.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writing to the channel.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ToChannel(System.IO.TextReader,System.Int32,System.Boolean,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Writes all lines from the source to a channel and calls complete when finished.
            </summary>
            <param name="source">The source data to use.</param>
            <param name="capacity">The optional bounded capacity of the channel. Default is unbound.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writing to the channel.</param>
            <returns>The channel reader containing the results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ToChannel``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Channels.ChannelOptions,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Writes all entries from the source to a channel and calls complete when finished.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="source">The source data to use.</param>
            <param name="channelOptions">The options for configuring the new channel.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writing to the channel.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ToChannel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Writes all entries from the source to a channel and calls complete when finished.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="source">The source data to use.</param>
            <param name="capacity">The optional bounded capacity of the channel. Default is unbound.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writing to the channel.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ToChannel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Writes all entries from the source to a channel and calls complete when finished.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="source">The source data to use.</param>
            <param name="capacity">The optional bounded capacity of the channel. Default is unbound.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="deferredExecution">If true, calls await Task.Yield() before writing to the channel.</param>
            <returns>The channel reader containing the results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ToChannelAsync``1(System.Collections.Generic.IEnumerable{System.Func{``0}},System.Threading.Channels.ChannelOptions,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes all entries and writes their results to a channel.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="source">The asynchronous source data to use.</param>
            <param name="channelOptions">The options for configuring the new channel.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ToChannelAsync``1(System.Collections.Generic.IEnumerable{System.Func{``0}},System.Int32,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes all entries and writes their results to a channel.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="source">The asynchronous source data to use.</param>
            <param name="capacity">The optional bounded capacity of the channel. Default is unbound.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ToChannelAsync``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Threading.Channels.ChannelOptions,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes all entries from the source to a channel and calls complete when finished.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="source">The asynchronous source data to use.</param>
            <param name="channelOptions">The options for configuring the new channel.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ToChannelAsync``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.ValueTask{``0}},System.Int32,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes all entries from the source to a channel and calls complete when finished.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="source">The asynchronous source data to use.</param>
            <param name="capacity">The optional bounded capacity of the channel. Default is unbound.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ToChannelAsync``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.Channels.ChannelOptions,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes all entries from the source to a channel and calls complete when finished.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="source">The asynchronous source data to use.</param>
            <param name="channelOptions">The options for configuring the new channel.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the results.</returns>
        </member>
        <member name="M:Open.ChannelExtensions.Extensions.ToChannelAsync``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Int32,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes all entries from the source to a channel and calls complete when finished.
            </summary>
            <typeparam name="T">The input type of the channel.</typeparam>
            <param name="source">The asynchronous source data to use.</param>
            <param name="capacity">The optional bounded capacity of the channel. Default is unbound.</param>
            <param name="singleReader">True will cause the resultant reader to optimize for the assumption that no concurrent read operations will occur.</param>
            <param name="maxConcurrency">The maximum number of concurrent operations.  Greater than 1 may likely cause results to be out of order.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>The channel reader containing the results.</returns>
        </member>
        <member name="T:Open.ChannelExtensions.TransformChannel`3">
            <summary>
            A channel wrapper that takes the provided channel and transforms them on demand when being read.
            </summary>
            <typeparam name="TWrite">Specifies the type of data that may be written to the channel.</typeparam>
            <typeparam name="TRead">Specifies the type of data read from the source channel.</typeparam>
            <typeparam name="TResult">Specifies the type of data that may be read from the channel.</typeparam>
        </member>
        <member name="M:Open.ChannelExtensions.TransformChannel`3.#ctor(System.Threading.Channels.Channel{`0,`1},System.Func{`1,`2})">
            <summary>
            Creates a channel wrapper that takes the provided channel and transforms them on demand when being read.
            </summary>
            <param name="source">The channel containing the source data.</param>
            <param name="transform">The transform function to be applied to the results when being read.</param>
        </member>
        <member name="T:Open.ChannelExtensions.TransformChannel`2">
            <summary>
            A channel wrapper that takes the provided channel and transforms them on demand when being read.
            </summary>
            <typeparam name="T">Specifies the type of data that may be written to the channel.</typeparam>
            <typeparam name="TResult">Specifies the type of data that may be read from the channel.</typeparam>
        </member>
        <member name="M:Open.ChannelExtensions.TransformChannel`2.#ctor(System.Threading.Channels.Channel{`0,`0},System.Func{`0,`1})">
            <summary>
            Creates a channel wrapper that takes the provided channel and transforms them on demand when being read.
            </summary>
            <param name="source">The channel containing the source data.</param>
            <param name="transform">The transform function to be applied to the results when being read.</param>
        </member>
    </members>
</doc>
